apiVersion: dynatrace.com/v1beta1
kind: DynaKube
metadata:
  name: dynakube
  namespace: dynatrace
spec:
  # Dynatrace apiUrl including the `/api` path at the end.
  # For SaaS, set `YOUR_ENVIRONMENT_ID` to your environment ID.
  # For Managed, change the apiUrl address.
  # For instructions on how to determine the environment ID and how to configure the apiUrl address, see https://www.dynatrace.com/support/help/reference/dynatrace-concepts/environment-id/.
  apiUrl: https://ENVIRONMENTID.live.dynatrace.com/api

  # Optional: Name of the secret holding the credentials required to connect to the Dynatrace tenant
  # If unset, name of custom resource is used
  #
  # tokens: ""

  # Optional: Disable certificate validation checks for installer download and API communication
  #
  # skipCertCheck: false

  # Optional: Set custom proxy settings either directly or from a secret with the field 'proxy'
  #
  # proxy:
  #   value: https://my-proxy-url.com
  #   valueFrom: name-of-my-proxy-secret

  # Optional: Adds custom RootCAs from a configmap
  #
  # trustedCAs: name-of-my-ca-configmap

  # Optional: Sets Network Zone for OneAgent and ActiveGate pods
  # Make sure networkZones are enabled on your cluster before (see https://www.dynatrace.com/support/help/setup-and-configuration/network-zones/network-zones-basic-info/)
  #
  # networkZone: name-of-my-network-zone

  # Optional: Defines a custom pull secret in case you use a private registry when pulling images from the dynatrace environment
  # The secret has to be of type 'kubernetes.io/dockerconfigjson' (see https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
  #
  # customPullSecret: "custom-pull-secret"

  # Optional: when enabled, and if Istio is installed on the Kubernetes environment, then the
  # Operator will create the corresponding VirtualService and ServiceEntry objects to allow access
  # to the Dynatrace cluster from the agent or the activeGate. Disabled by default.
  #
  # enableIstio: false

  # the namespaces which we want to inject into; matchLabels: <map-of-labels-to-match>; matchExpression: <see example https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#resources-that-support-set-based-requirements >
  # if not set we inject into every namespace
  # namespaceSelector has no effect when used together with hostMonitoring or classicFullstack
  #
  # namespaceSelector:
  #   matchLabels:
  #     test: test

  oneAgent:
    # enable application-only monitoring and change its settings
    # Cannot be used in conjunction with cloud-native fullstack monitoring, classic fullstack monitoring or host monitoring
    applicationMonitoring:
      # Optional: If specified, indicates the OneAgent version to use
      # Defaults to latest
      #
      # version:

      # Optional: If you want to use CSIDriver; disable if your cluster does not have 'nodes' to fall back to the volume approach.
      # Defaults to false
      #
      useCSIDriver: false

      # Optional: The URI of the image that contains the codemodules that will be injected into user applications.
      # Only available when `useCSIDriver` is set to `true`.
      # Code Modules Image Dockerfile sample: https://dt-url.net/operator-docker-samples
      # codeModulesImage: ""

      # initResources:
      #   requests:
      #     cpu: 100m
      #     memory: 512Mi
      #   limits:
      #     cpu: 300m
      #     memory: 1.5Gi

  # Configuration for ActiveGate instances.
  activeGate:
    # Enables listed ActiveGate capabilities
    capabilities:
      - routing
      - kubernetes-monitoring
      - dynatrace-api

    # Optional: to use a custom ActiveGate Docker image.
    image: ""

    # Amount of replicas of ActiveGate pods
    #
    # replicas: 1

    # Optional: tolerations to include with the ActiveGate StatefulSet.
    # See more here: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    #
    # tolerations:
    # - effect: NoSchedule
    #   key: node-role.kubernetes.io/master
    #   operator: Exists

    # Optional: node selector to control on which nodes the ActiveGate will be deployed.
    #
    # nodeSelector: {}

    # Optional: resource settings for ActiveGate container. Consumption of the ActiveGate heavily depends
    # on the workload to monitor; please adjust values accordingly.
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1.5Gi

    # Optional: labels are customer defined labels for ActiveGate Pods to structure workloads as desired.
    #
    # labels:
    #   custom: label

    # Optional: additional environment variables to add to the ActiveGate Pods.
    #
    # env: []

    # Optional: Set activation group for ActiveGate
    #
    # group: ""

    # Optional: Add a custom properties file by providing it as a value or reference it from a secret
    # If referenced from a secret, make sure the key is called 'customProperties'
    #
    # customProperties:
    #   value: |
    #     [connectivity]
    #     networkZone=
    #   valueFrom: myCustomPropertiesConfigMap

    # Optional: the name of a secret containing ActiveGate TLS cert+key and password. If not set, self-signed certificate is used.
    # server.p12: certificate+key pair in pkcs12 format
    #
    # tlsSecretName: "my-tls-secret"

    # Optional: Sets DNS Policy for the ActiveGate pods
    #
    # dnsPolicy: "Default"
