connectors: {}
exporters:
  otlphttp:
    endpoint: "exporters-test-endpoint"
    tls:
      ca_file: "/run/opensignals/cacerts/certs"
      include_system_ca_certs_pool: true
    headers:
      Authorization: "Api-Token test-token"
extensions:
  health_check:
    endpoint: test:13133
processors:
  cumulativetodelta: {}
  k8sattributes:
    extract:
      annotations:
        - from: pod
          key_regex: metadata.dynatrace.com/(.*)
          tag_name: $$1
      metadata:
        - k8s.cluster.uid
        - k8s.node.name
        - k8s.namespace.name
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.pod.ip
        - k8s.deployment.name
        - k8s.replicaset.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - k8s.job.name
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: connection
  transform:
    error_mode: ignore
    log_statements:
      - context: resource
        statements:
          - set(attributes["k8s.workload.name"], attributes["k8s.statefulset.name"]) where IsString(attributes["k8s.statefulset.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.replicaset.name"]) where IsString(attributes["k8s.replicaset.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.job.name"]) where IsString(attributes["k8s.job.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.deployment.name"]) where IsString(attributes["k8s.deployment.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.daemonset.name"]) where IsString(attributes["k8s.daemonset.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.cronjob.name"]) where IsString(attributes["k8s.cronjob.name"])
          - set(attributes["k8s.workload.kind"], "statefulset") where IsString(attributes["k8s.statefulset.name"])
          - set(attributes["k8s.workload.kind"], "replicaset") where IsString(attributes["k8s.replicaset.name"])
          - set(attributes["k8s.workload.kind"], "job") where IsString(attributes["k8s.job.name"])
          - set(attributes["k8s.workload.kind"], "deployment") where IsString(attributes["k8s.deployment.name"])
          - set(attributes["k8s.workload.kind"], "daemonset") where IsString(attributes["k8s.daemonset.name"])
          - set(attributes["k8s.workload.kind"], "cronjob") where IsString(attributes["k8s.cronjob.name"])
          - set(attributes["k8s.cluster.uid"], "${env:K8S_CLUSTER_UID}") where attributes["k8s.cluster.uid"] == nil
          - set(attributes["k8s.cluster.name"], "${env:K8S_CLUSTER_NAME}")
          - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.workload.name"])
          - set(attributes["dt.kubernetes.workload.kind"], attributes["k8s.workload.kind"])
          - set(attributes["dt.entity.kubernetes_cluster"], "${env:DT_ENTITY_KUBERNETES_CLUSTER}")
          - delete_key(attributes, "k8s.statefulset.name")
          - delete_key(attributes, "k8s.replicaset.name")
          - delete_key(attributes, "k8s.job.name")
          - delete_key(attributes, "k8s.deployment.name")
          - delete_key(attributes, "k8s.daemonset.name")
          - delete_key(attributes, "k8s.cronjob.name")
    metric_statements:
      - context: resource
        statements:
          - set(attributes["k8s.workload.name"], attributes["k8s.statefulset.name"]) where IsString(attributes["k8s.statefulset.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.replicaset.name"]) where IsString(attributes["k8s.replicaset.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.job.name"]) where IsString(attributes["k8s.job.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.deployment.name"]) where IsString(attributes["k8s.deployment.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.daemonset.name"]) where IsString(attributes["k8s.daemonset.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.cronjob.name"]) where IsString(attributes["k8s.cronjob.name"])
          - set(attributes["k8s.workload.kind"], "statefulset") where IsString(attributes["k8s.statefulset.name"])
          - set(attributes["k8s.workload.kind"], "replicaset") where IsString(attributes["k8s.replicaset.name"])
          - set(attributes["k8s.workload.kind"], "job") where IsString(attributes["k8s.job.name"])
          - set(attributes["k8s.workload.kind"], "deployment") where IsString(attributes["k8s.deployment.name"])
          - set(attributes["k8s.workload.kind"], "daemonset") where IsString(attributes["k8s.daemonset.name"])
          - set(attributes["k8s.workload.kind"], "cronjob") where IsString(attributes["k8s.cronjob.name"])
          - set(attributes["k8s.cluster.uid"], "${env:K8S_CLUSTER_UID}") where attributes["k8s.cluster.uid"] == nil
          - set(attributes["k8s.cluster.name"], "${env:K8S_CLUSTER_NAME}")
          - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.workload.name"])
          - set(attributes["dt.kubernetes.workload.kind"], attributes["k8s.workload.kind"])
          - set(attributes["dt.entity.kubernetes_cluster"], "${env:DT_ENTITY_KUBERNETES_CLUSTER}")
          - delete_key(attributes, "k8s.statefulset.name")
          - delete_key(attributes, "k8s.replicaset.name")
          - delete_key(attributes, "k8s.job.name")
          - delete_key(attributes, "k8s.deployment.name")
          - delete_key(attributes, "k8s.daemonset.name")
          - delete_key(attributes, "k8s.cronjob.name")
    trace_statements:
      - context: resource
        statements:
          - set(attributes["k8s.workload.name"], attributes["k8s.statefulset.name"]) where IsString(attributes["k8s.statefulset.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.replicaset.name"]) where IsString(attributes["k8s.replicaset.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.job.name"]) where IsString(attributes["k8s.job.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.deployment.name"]) where IsString(attributes["k8s.deployment.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.daemonset.name"]) where IsString(attributes["k8s.daemonset.name"])
          - set(attributes["k8s.workload.name"], attributes["k8s.cronjob.name"]) where IsString(attributes["k8s.cronjob.name"])
          - set(attributes["k8s.workload.kind"], "statefulset") where IsString(attributes["k8s.statefulset.name"])
          - set(attributes["k8s.workload.kind"], "replicaset") where IsString(attributes["k8s.replicaset.name"])
          - set(attributes["k8s.workload.kind"], "job") where IsString(attributes["k8s.job.name"])
          - set(attributes["k8s.workload.kind"], "deployment") where IsString(attributes["k8s.deployment.name"])
          - set(attributes["k8s.workload.kind"], "daemonset") where IsString(attributes["k8s.daemonset.name"])
          - set(attributes["k8s.workload.kind"], "cronjob") where IsString(attributes["k8s.cronjob.name"])
          - set(attributes["k8s.cluster.uid"], "${env:K8S_CLUSTER_UID}") where attributes["k8s.cluster.uid"] == nil
          - set(attributes["k8s.cluster.name"], "${env:K8S_CLUSTER_NAME}")
          - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.workload.name"])
          - set(attributes["dt.kubernetes.workload.kind"], attributes["k8s.workload.kind"])
          - set(attributes["dt.entity.kubernetes_cluster"], "${env:DT_ENTITY_KUBERNETES_CLUSTER}")
          - delete_key(attributes, "k8s.statefulset.name")
          - delete_key(attributes, "k8s.replicaset.name")
          - delete_key(attributes, "k8s.job.name")
          - delete_key(attributes, "k8s.deployment.name")
          - delete_key(attributes, "k8s.daemonset.name")
          - delete_key(attributes, "k8s.cronjob.name")
  batch/traces:
    send_batch_size: 5000
    send_batch_max_size: 5000
    timeout: 60s
  batch/metrics:
    send_batch_size: 3000
    send_batch_max_size: 3000
    timeout: 60s
  batch/logs:
    send_batch_size: 1800
    send_batch_max_size: 2000
    timeout: 60s
  memory_limiter:
    check_interval: 1s
    limit_percentage: 70
    spike_limit_percentage: 30
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: test:4317
        tls:
          cert_file: /run/opensignals/tls/tls.crt
          key_file: /run/opensignals/tls/tls.key
      http:
        endpoint: test:4318
        tls:
          cert_file: /run/opensignals/tls/tls.crt
          key_file: /run/opensignals/tls/tls.key
  jaeger:
    protocols:
      grpc:
        endpoint: test:14250
        tls:
          cert_file: /run/opensignals/tls/tls.crt
          key_file: /run/opensignals/tls/tls.key
      thrift_binary:
        endpoint: test:6832
      thrift_compact:
        endpoint: test:6831
      thrift_http:
        endpoint: test:14268
        tls:
          cert_file: /run/opensignals/tls/tls.crt
          key_file: /run/opensignals/tls/tls.key
  zipkin:
    endpoint: test:9411
    tls:
      cert_file: /run/opensignals/tls/tls.crt
      key_file: /run/opensignals/tls/tls.key
  statsd:
    endpoint: test:8125
    timer_histogram_mapping:
      - histogram:
          max_size: 10
        observer_type: histogram
        statsd_type: histogram
      - histogram:
          max_size: 100
        observer_type: histogram
        statsd_type: timing
      - histogram:
          max_size: 100
        observer_type: histogram
        statsd_type: distribution
service:
  extensions:
    - health_check
  pipelines:
    logs:
      exporters:
        - otlphttp
      receivers:
        - otlp
      processors:
        - memory_limiter
        - k8sattributes
        - transform
        - batch/logs
    metrics:
      exporters:
        - otlphttp
      receivers:
        - otlp
        - statsd
      processors:
        - memory_limiter
        - k8sattributes
        - transform
        - cumulativetodelta
        - batch/metrics
    traces:
      exporters:
        - otlphttp
      receivers:
        - otlp
        - jaeger
        - zipkin
      processors:
        - memory_limiter
        - k8sattributes
        - transform
        - batch/traces
