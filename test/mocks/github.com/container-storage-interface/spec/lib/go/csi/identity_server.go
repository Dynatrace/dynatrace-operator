// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	csi "github.com/container-storage-interface/spec/lib/go/csi"
	mock "github.com/stretchr/testify/mock"
)

// IdentityServer is an autogenerated mock type for the IdentityServer type
type IdentityServer struct {
	mock.Mock
}

type IdentityServer_Expecter struct {
	mock *mock.Mock
}

func (_m *IdentityServer) EXPECT() *IdentityServer_Expecter {
	return &IdentityServer_Expecter{mock: &_m.Mock}
}

// GetPluginCapabilities provides a mock function with given fields: _a0, _a1
func (_m *IdentityServer) GetPluginCapabilities(_a0 context.Context, _a1 *csi.GetPluginCapabilitiesRequest) (*csi.GetPluginCapabilitiesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPluginCapabilities")
	}

	var r0 *csi.GetPluginCapabilitiesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *csi.GetPluginCapabilitiesRequest) (*csi.GetPluginCapabilitiesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *csi.GetPluginCapabilitiesRequest) *csi.GetPluginCapabilitiesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csi.GetPluginCapabilitiesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *csi.GetPluginCapabilitiesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentityServer_GetPluginCapabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginCapabilities'
type IdentityServer_GetPluginCapabilities_Call struct {
	*mock.Call
}

// GetPluginCapabilities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *csi.GetPluginCapabilitiesRequest
func (_e *IdentityServer_Expecter) GetPluginCapabilities(_a0 interface{}, _a1 interface{}) *IdentityServer_GetPluginCapabilities_Call {
	return &IdentityServer_GetPluginCapabilities_Call{Call: _e.mock.On("GetPluginCapabilities", _a0, _a1)}
}

func (_c *IdentityServer_GetPluginCapabilities_Call) Run(run func(_a0 context.Context, _a1 *csi.GetPluginCapabilitiesRequest)) *IdentityServer_GetPluginCapabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*csi.GetPluginCapabilitiesRequest))
	})
	return _c
}

func (_c *IdentityServer_GetPluginCapabilities_Call) Return(_a0 *csi.GetPluginCapabilitiesResponse, _a1 error) *IdentityServer_GetPluginCapabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IdentityServer_GetPluginCapabilities_Call) RunAndReturn(run func(context.Context, *csi.GetPluginCapabilitiesRequest) (*csi.GetPluginCapabilitiesResponse, error)) *IdentityServer_GetPluginCapabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetPluginInfo provides a mock function with given fields: _a0, _a1
func (_m *IdentityServer) GetPluginInfo(_a0 context.Context, _a1 *csi.GetPluginInfoRequest) (*csi.GetPluginInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPluginInfo")
	}

	var r0 *csi.GetPluginInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *csi.GetPluginInfoRequest) (*csi.GetPluginInfoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *csi.GetPluginInfoRequest) *csi.GetPluginInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csi.GetPluginInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *csi.GetPluginInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentityServer_GetPluginInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginInfo'
type IdentityServer_GetPluginInfo_Call struct {
	*mock.Call
}

// GetPluginInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *csi.GetPluginInfoRequest
func (_e *IdentityServer_Expecter) GetPluginInfo(_a0 interface{}, _a1 interface{}) *IdentityServer_GetPluginInfo_Call {
	return &IdentityServer_GetPluginInfo_Call{Call: _e.mock.On("GetPluginInfo", _a0, _a1)}
}

func (_c *IdentityServer_GetPluginInfo_Call) Run(run func(_a0 context.Context, _a1 *csi.GetPluginInfoRequest)) *IdentityServer_GetPluginInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*csi.GetPluginInfoRequest))
	})
	return _c
}

func (_c *IdentityServer_GetPluginInfo_Call) Return(_a0 *csi.GetPluginInfoResponse, _a1 error) *IdentityServer_GetPluginInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IdentityServer_GetPluginInfo_Call) RunAndReturn(run func(context.Context, *csi.GetPluginInfoRequest) (*csi.GetPluginInfoResponse, error)) *IdentityServer_GetPluginInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Probe provides a mock function with given fields: _a0, _a1
func (_m *IdentityServer) Probe(_a0 context.Context, _a1 *csi.ProbeRequest) (*csi.ProbeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Probe")
	}

	var r0 *csi.ProbeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *csi.ProbeRequest) (*csi.ProbeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *csi.ProbeRequest) *csi.ProbeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csi.ProbeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *csi.ProbeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentityServer_Probe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Probe'
type IdentityServer_Probe_Call struct {
	*mock.Call
}

// Probe is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *csi.ProbeRequest
func (_e *IdentityServer_Expecter) Probe(_a0 interface{}, _a1 interface{}) *IdentityServer_Probe_Call {
	return &IdentityServer_Probe_Call{Call: _e.mock.On("Probe", _a0, _a1)}
}

func (_c *IdentityServer_Probe_Call) Run(run func(_a0 context.Context, _a1 *csi.ProbeRequest)) *IdentityServer_Probe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*csi.ProbeRequest))
	})
	return _c
}

func (_c *IdentityServer_Probe_Call) Return(_a0 *csi.ProbeResponse, _a1 error) *IdentityServer_Probe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IdentityServer_Probe_Call) RunAndReturn(run func(context.Context, *csi.ProbeRequest) (*csi.ProbeResponse, error)) *IdentityServer_Probe_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedIdentityServer provides a mock function with no fields
func (_m *IdentityServer) mustEmbedUnimplementedIdentityServer() {
	_m.Called()
}

// IdentityServer_mustEmbedUnimplementedIdentityServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedIdentityServer'
type IdentityServer_mustEmbedUnimplementedIdentityServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedIdentityServer is a helper method to define mock.On call
func (_e *IdentityServer_Expecter) mustEmbedUnimplementedIdentityServer() *IdentityServer_mustEmbedUnimplementedIdentityServer_Call {
	return &IdentityServer_mustEmbedUnimplementedIdentityServer_Call{Call: _e.mock.On("mustEmbedUnimplementedIdentityServer")}
}

func (_c *IdentityServer_mustEmbedUnimplementedIdentityServer_Call) Run(run func()) *IdentityServer_mustEmbedUnimplementedIdentityServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityServer_mustEmbedUnimplementedIdentityServer_Call) Return() *IdentityServer_mustEmbedUnimplementedIdentityServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *IdentityServer_mustEmbedUnimplementedIdentityServer_Call) RunAndReturn(run func()) *IdentityServer_mustEmbedUnimplementedIdentityServer_Call {
	_c.Run(run)
	return _c
}

// NewIdentityServer creates a new instance of IdentityServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIdentityServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *IdentityServer {
	mock := &IdentityServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
