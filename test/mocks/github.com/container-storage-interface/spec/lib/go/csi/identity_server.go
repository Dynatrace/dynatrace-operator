// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/container-storage-interface/spec/lib/go/csi"
	mock "github.com/stretchr/testify/mock"
)

// NewIdentityServer creates a new instance of IdentityServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIdentityServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *IdentityServer {
	mock := &IdentityServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IdentityServer is an autogenerated mock type for the IdentityServer type
type IdentityServer struct {
	mock.Mock
}

type IdentityServer_Expecter struct {
	mock *mock.Mock
}

func (_m *IdentityServer) EXPECT() *IdentityServer_Expecter {
	return &IdentityServer_Expecter{mock: &_m.Mock}
}

// GetPluginCapabilities provides a mock function for the type IdentityServer
func (_mock *IdentityServer) GetPluginCapabilities(context1 context.Context, getPluginCapabilitiesRequest *csi.GetPluginCapabilitiesRequest) (*csi.GetPluginCapabilitiesResponse, error) {
	ret := _mock.Called(context1, getPluginCapabilitiesRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetPluginCapabilities")
	}

	var r0 *csi.GetPluginCapabilitiesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csi.GetPluginCapabilitiesRequest) (*csi.GetPluginCapabilitiesResponse, error)); ok {
		return returnFunc(context1, getPluginCapabilitiesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csi.GetPluginCapabilitiesRequest) *csi.GetPluginCapabilitiesResponse); ok {
		r0 = returnFunc(context1, getPluginCapabilitiesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csi.GetPluginCapabilitiesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *csi.GetPluginCapabilitiesRequest) error); ok {
		r1 = returnFunc(context1, getPluginCapabilitiesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IdentityServer_GetPluginCapabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginCapabilities'
type IdentityServer_GetPluginCapabilities_Call struct {
	*mock.Call
}

// GetPluginCapabilities is a helper method to define mock.On call
//   - context1 context.Context
//   - getPluginCapabilitiesRequest *csi.GetPluginCapabilitiesRequest
func (_e *IdentityServer_Expecter) GetPluginCapabilities(context1 interface{}, getPluginCapabilitiesRequest interface{}) *IdentityServer_GetPluginCapabilities_Call {
	return &IdentityServer_GetPluginCapabilities_Call{Call: _e.mock.On("GetPluginCapabilities", context1, getPluginCapabilitiesRequest)}
}

func (_c *IdentityServer_GetPluginCapabilities_Call) Run(run func(context1 context.Context, getPluginCapabilitiesRequest *csi.GetPluginCapabilitiesRequest)) *IdentityServer_GetPluginCapabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *csi.GetPluginCapabilitiesRequest
		if args[1] != nil {
			arg1 = args[1].(*csi.GetPluginCapabilitiesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IdentityServer_GetPluginCapabilities_Call) Return(getPluginCapabilitiesResponse *csi.GetPluginCapabilitiesResponse, err error) *IdentityServer_GetPluginCapabilities_Call {
	_c.Call.Return(getPluginCapabilitiesResponse, err)
	return _c
}

func (_c *IdentityServer_GetPluginCapabilities_Call) RunAndReturn(run func(context1 context.Context, getPluginCapabilitiesRequest *csi.GetPluginCapabilitiesRequest) (*csi.GetPluginCapabilitiesResponse, error)) *IdentityServer_GetPluginCapabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetPluginInfo provides a mock function for the type IdentityServer
func (_mock *IdentityServer) GetPluginInfo(context1 context.Context, getPluginInfoRequest *csi.GetPluginInfoRequest) (*csi.GetPluginInfoResponse, error) {
	ret := _mock.Called(context1, getPluginInfoRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetPluginInfo")
	}

	var r0 *csi.GetPluginInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csi.GetPluginInfoRequest) (*csi.GetPluginInfoResponse, error)); ok {
		return returnFunc(context1, getPluginInfoRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csi.GetPluginInfoRequest) *csi.GetPluginInfoResponse); ok {
		r0 = returnFunc(context1, getPluginInfoRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csi.GetPluginInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *csi.GetPluginInfoRequest) error); ok {
		r1 = returnFunc(context1, getPluginInfoRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IdentityServer_GetPluginInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginInfo'
type IdentityServer_GetPluginInfo_Call struct {
	*mock.Call
}

// GetPluginInfo is a helper method to define mock.On call
//   - context1 context.Context
//   - getPluginInfoRequest *csi.GetPluginInfoRequest
func (_e *IdentityServer_Expecter) GetPluginInfo(context1 interface{}, getPluginInfoRequest interface{}) *IdentityServer_GetPluginInfo_Call {
	return &IdentityServer_GetPluginInfo_Call{Call: _e.mock.On("GetPluginInfo", context1, getPluginInfoRequest)}
}

func (_c *IdentityServer_GetPluginInfo_Call) Run(run func(context1 context.Context, getPluginInfoRequest *csi.GetPluginInfoRequest)) *IdentityServer_GetPluginInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *csi.GetPluginInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*csi.GetPluginInfoRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IdentityServer_GetPluginInfo_Call) Return(getPluginInfoResponse *csi.GetPluginInfoResponse, err error) *IdentityServer_GetPluginInfo_Call {
	_c.Call.Return(getPluginInfoResponse, err)
	return _c
}

func (_c *IdentityServer_GetPluginInfo_Call) RunAndReturn(run func(context1 context.Context, getPluginInfoRequest *csi.GetPluginInfoRequest) (*csi.GetPluginInfoResponse, error)) *IdentityServer_GetPluginInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Probe provides a mock function for the type IdentityServer
func (_mock *IdentityServer) Probe(context1 context.Context, probeRequest *csi.ProbeRequest) (*csi.ProbeResponse, error) {
	ret := _mock.Called(context1, probeRequest)

	if len(ret) == 0 {
		panic("no return value specified for Probe")
	}

	var r0 *csi.ProbeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csi.ProbeRequest) (*csi.ProbeResponse, error)); ok {
		return returnFunc(context1, probeRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csi.ProbeRequest) *csi.ProbeResponse); ok {
		r0 = returnFunc(context1, probeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csi.ProbeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *csi.ProbeRequest) error); ok {
		r1 = returnFunc(context1, probeRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IdentityServer_Probe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Probe'
type IdentityServer_Probe_Call struct {
	*mock.Call
}

// Probe is a helper method to define mock.On call
//   - context1 context.Context
//   - probeRequest *csi.ProbeRequest
func (_e *IdentityServer_Expecter) Probe(context1 interface{}, probeRequest interface{}) *IdentityServer_Probe_Call {
	return &IdentityServer_Probe_Call{Call: _e.mock.On("Probe", context1, probeRequest)}
}

func (_c *IdentityServer_Probe_Call) Run(run func(context1 context.Context, probeRequest *csi.ProbeRequest)) *IdentityServer_Probe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *csi.ProbeRequest
		if args[1] != nil {
			arg1 = args[1].(*csi.ProbeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IdentityServer_Probe_Call) Return(probeResponse *csi.ProbeResponse, err error) *IdentityServer_Probe_Call {
	_c.Call.Return(probeResponse, err)
	return _c
}

func (_c *IdentityServer_Probe_Call) RunAndReturn(run func(context1 context.Context, probeRequest *csi.ProbeRequest) (*csi.ProbeResponse, error)) *IdentityServer_Probe_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedIdentityServer provides a mock function for the type IdentityServer
func (_mock *IdentityServer) mustEmbedUnimplementedIdentityServer() {
	_mock.Called()
	return
}

// IdentityServer_mustEmbedUnimplementedIdentityServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedIdentityServer'
type IdentityServer_mustEmbedUnimplementedIdentityServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedIdentityServer is a helper method to define mock.On call
func (_e *IdentityServer_Expecter) mustEmbedUnimplementedIdentityServer() *IdentityServer_mustEmbedUnimplementedIdentityServer_Call {
	return &IdentityServer_mustEmbedUnimplementedIdentityServer_Call{Call: _e.mock.On("mustEmbedUnimplementedIdentityServer")}
}

func (_c *IdentityServer_mustEmbedUnimplementedIdentityServer_Call) Run(run func()) *IdentityServer_mustEmbedUnimplementedIdentityServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityServer_mustEmbedUnimplementedIdentityServer_Call) Return() *IdentityServer_mustEmbedUnimplementedIdentityServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *IdentityServer_mustEmbedUnimplementedIdentityServer_Call) RunAndReturn(run func()) *IdentityServer_mustEmbedUnimplementedIdentityServer_Call {
	_c.Run(run)
	return _c
}
