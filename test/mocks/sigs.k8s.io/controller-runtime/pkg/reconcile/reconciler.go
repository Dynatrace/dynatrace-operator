// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// Reconciler is an autogenerated mock type for the Reconciler type
type Reconciler[request comparable] struct {
	mock.Mock
}

type Reconciler_Expecter[request comparable] struct {
	mock *mock.Mock
}

func (_m *Reconciler[request]) EXPECT() *Reconciler_Expecter[request] {
	return &Reconciler_Expecter[request]{mock: &_m.Mock}
}

// Reconcile provides a mock function with given fields: _a0, _a1
func (_m *Reconciler[request]) Reconcile(_a0 context.Context, _a1 reconcile.Request) (reconcile.Result, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Reconcile")
	}

	var r0 reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) (reconcile.Result, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) reconcile.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, reconcile.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reconciler_Reconcile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconcile'
type Reconciler_Reconcile_Call[request comparable] struct {
	*mock.Call
}

// Reconcile is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 reconcile.Request
func (_e *Reconciler_Expecter[request]) Reconcile(_a0 interface{}, _a1 interface{}) *Reconciler_Reconcile_Call[request] {
	return &Reconciler_Reconcile_Call[request]{Call: _e.mock.On("Reconcile", _a0, _a1)}
}

func (_c *Reconciler_Reconcile_Call[request]) Run(run func(_a0 context.Context, _a1 reconcile.Request)) *Reconciler_Reconcile_Call[request] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(reconcile.Request))
	})
	return _c
}

func (_c *Reconciler_Reconcile_Call[request]) Return(_a0 reconcile.Result, _a1 error) *Reconciler_Reconcile_Call[request] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Reconciler_Reconcile_Call[request]) RunAndReturn(run func(context.Context, reconcile.Request) (reconcile.Result, error)) *Reconciler_Reconcile_Call[request] {
	_c.Call.Return(run)
	return _c
}

// NewReconciler creates a new instance of Reconciler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReconciler[request comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *Reconciler[request] {
	mock := &Reconciler[request]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
