// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	v11 "k8s.io/api/core/v1"
	v12 "k8s.io/api/policy/v1"
	"k8s.io/api/policy/v1beta1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/applyconfigurations/core/v1"
	"k8s.io/client-go/rest"
)

// NewPodInterface creates a new instance of PodInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPodInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PodInterface {
	mock := &PodInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PodInterface is an autogenerated mock type for the PodInterface type
type PodInterface struct {
	mock.Mock
}

type PodInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PodInterface) EXPECT() *PodInterface_Expecter {
	return &PodInterface_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function for the type PodInterface
func (_mock *PodInterface) Apply(ctx context.Context, pod *v1.PodApplyConfiguration, opts v10.ApplyOptions) (*v11.Pod, error) {
	ret := _mock.Called(ctx, pod, opts)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *v11.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PodApplyConfiguration, v10.ApplyOptions) (*v11.Pod, error)); ok {
		return returnFunc(ctx, pod, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PodApplyConfiguration, v10.ApplyOptions) *v11.Pod); ok {
		r0 = returnFunc(ctx, pod, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.Pod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.PodApplyConfiguration, v10.ApplyOptions) error); ok {
		r1 = returnFunc(ctx, pod, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type PodInterface_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - pod *v1.PodApplyConfiguration
//   - opts v10.ApplyOptions
func (_e *PodInterface_Expecter) Apply(ctx interface{}, pod interface{}, opts interface{}) *PodInterface_Apply_Call {
	return &PodInterface_Apply_Call{Call: _e.mock.On("Apply", ctx, pod, opts)}
}

func (_c *PodInterface_Apply_Call) Run(run func(ctx context.Context, pod *v1.PodApplyConfiguration, opts v10.ApplyOptions)) *PodInterface_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.PodApplyConfiguration
		if args[1] != nil {
			arg1 = args[1].(*v1.PodApplyConfiguration)
		}
		var arg2 v10.ApplyOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PodInterface_Apply_Call) Return(result *v11.Pod, err error) *PodInterface_Apply_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *PodInterface_Apply_Call) RunAndReturn(run func(ctx context.Context, pod *v1.PodApplyConfiguration, opts v10.ApplyOptions) (*v11.Pod, error)) *PodInterface_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyStatus provides a mock function for the type PodInterface
func (_mock *PodInterface) ApplyStatus(ctx context.Context, pod *v1.PodApplyConfiguration, opts v10.ApplyOptions) (*v11.Pod, error) {
	ret := _mock.Called(ctx, pod, opts)

	if len(ret) == 0 {
		panic("no return value specified for ApplyStatus")
	}

	var r0 *v11.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PodApplyConfiguration, v10.ApplyOptions) (*v11.Pod, error)); ok {
		return returnFunc(ctx, pod, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PodApplyConfiguration, v10.ApplyOptions) *v11.Pod); ok {
		r0 = returnFunc(ctx, pod, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.Pod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.PodApplyConfiguration, v10.ApplyOptions) error); ok {
		r1 = returnFunc(ctx, pod, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_ApplyStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyStatus'
type PodInterface_ApplyStatus_Call struct {
	*mock.Call
}

// ApplyStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - pod *v1.PodApplyConfiguration
//   - opts v10.ApplyOptions
func (_e *PodInterface_Expecter) ApplyStatus(ctx interface{}, pod interface{}, opts interface{}) *PodInterface_ApplyStatus_Call {
	return &PodInterface_ApplyStatus_Call{Call: _e.mock.On("ApplyStatus", ctx, pod, opts)}
}

func (_c *PodInterface_ApplyStatus_Call) Run(run func(ctx context.Context, pod *v1.PodApplyConfiguration, opts v10.ApplyOptions)) *PodInterface_ApplyStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.PodApplyConfiguration
		if args[1] != nil {
			arg1 = args[1].(*v1.PodApplyConfiguration)
		}
		var arg2 v10.ApplyOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ApplyOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PodInterface_ApplyStatus_Call) Return(result *v11.Pod, err error) *PodInterface_ApplyStatus_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *PodInterface_ApplyStatus_Call) RunAndReturn(run func(ctx context.Context, pod *v1.PodApplyConfiguration, opts v10.ApplyOptions) (*v11.Pod, error)) *PodInterface_ApplyStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Bind provides a mock function for the type PodInterface
func (_mock *PodInterface) Bind(ctx context.Context, binding *v11.Binding, opts v10.CreateOptions) error {
	ret := _mock.Called(ctx, binding, opts)

	if len(ret) == 0 {
		panic("no return value specified for Bind")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.Binding, v10.CreateOptions) error); ok {
		r0 = returnFunc(ctx, binding, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PodInterface_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type PodInterface_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - ctx context.Context
//   - binding *v11.Binding
//   - opts v10.CreateOptions
func (_e *PodInterface_Expecter) Bind(ctx interface{}, binding interface{}, opts interface{}) *PodInterface_Bind_Call {
	return &PodInterface_Bind_Call{Call: _e.mock.On("Bind", ctx, binding, opts)}
}

func (_c *PodInterface_Bind_Call) Run(run func(ctx context.Context, binding *v11.Binding, opts v10.CreateOptions)) *PodInterface_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.Binding
		if args[1] != nil {
			arg1 = args[1].(*v11.Binding)
		}
		var arg2 v10.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.CreateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PodInterface_Bind_Call) Return(err error) *PodInterface_Bind_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PodInterface_Bind_Call) RunAndReturn(run func(ctx context.Context, binding *v11.Binding, opts v10.CreateOptions) error) *PodInterface_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type PodInterface
func (_mock *PodInterface) Create(ctx context.Context, pod *v11.Pod, opts v10.CreateOptions) (*v11.Pod, error) {
	ret := _mock.Called(ctx, pod, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v11.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.Pod, v10.CreateOptions) (*v11.Pod, error)); ok {
		return returnFunc(ctx, pod, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.Pod, v10.CreateOptions) *v11.Pod); ok {
		r0 = returnFunc(ctx, pod, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.Pod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v11.Pod, v10.CreateOptions) error); ok {
		r1 = returnFunc(ctx, pod, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PodInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - pod *v11.Pod
//   - opts v10.CreateOptions
func (_e *PodInterface_Expecter) Create(ctx interface{}, pod interface{}, opts interface{}) *PodInterface_Create_Call {
	return &PodInterface_Create_Call{Call: _e.mock.On("Create", ctx, pod, opts)}
}

func (_c *PodInterface_Create_Call) Run(run func(ctx context.Context, pod *v11.Pod, opts v10.CreateOptions)) *PodInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.Pod
		if args[1] != nil {
			arg1 = args[1].(*v11.Pod)
		}
		var arg2 v10.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.CreateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PodInterface_Create_Call) Return(pod1 *v11.Pod, err error) *PodInterface_Create_Call {
	_c.Call.Return(pod1, err)
	return _c
}

func (_c *PodInterface_Create_Call) RunAndReturn(run func(ctx context.Context, pod *v11.Pod, opts v10.CreateOptions) (*v11.Pod, error)) *PodInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type PodInterface
func (_mock *PodInterface) Delete(ctx context.Context, name string, opts v10.DeleteOptions) error {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.DeleteOptions) error); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PodInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PodInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.DeleteOptions
func (_e *PodInterface_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *PodInterface_Delete_Call {
	return &PodInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *PodInterface_Delete_Call) Run(run func(ctx context.Context, name string, opts v10.DeleteOptions)) *PodInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v10.DeleteOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PodInterface_Delete_Call) Return(err error) *PodInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PodInterface_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.DeleteOptions) error) *PodInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function for the type PodInterface
func (_mock *PodInterface) DeleteCollection(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions) error {
	ret := _mock.Called(ctx, opts, listOpts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.DeleteOptions, v10.ListOptions) error); ok {
		r0 = returnFunc(ctx, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PodInterface_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type PodInterface_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.DeleteOptions
//   - listOpts v10.ListOptions
func (_e *PodInterface_Expecter) DeleteCollection(ctx interface{}, opts interface{}, listOpts interface{}) *PodInterface_DeleteCollection_Call {
	return &PodInterface_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, opts, listOpts)}
}

func (_c *PodInterface_DeleteCollection_Call) Run(run func(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions)) *PodInterface_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.DeleteOptions
		if args[1] != nil {
			arg1 = args[1].(v10.DeleteOptions)
		}
		var arg2 v10.ListOptions
		if args[2] != nil {
			arg2 = args[2].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PodInterface_DeleteCollection_Call) Return(err error) *PodInterface_DeleteCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PodInterface_DeleteCollection_Call) RunAndReturn(run func(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions) error) *PodInterface_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Evict provides a mock function for the type PodInterface
func (_mock *PodInterface) Evict(ctx context.Context, eviction *v1beta1.Eviction) error {
	ret := _mock.Called(ctx, eviction)

	if len(ret) == 0 {
		panic("no return value specified for Evict")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.Eviction) error); ok {
		r0 = returnFunc(ctx, eviction)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PodInterface_Evict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evict'
type PodInterface_Evict_Call struct {
	*mock.Call
}

// Evict is a helper method to define mock.On call
//   - ctx context.Context
//   - eviction *v1beta1.Eviction
func (_e *PodInterface_Expecter) Evict(ctx interface{}, eviction interface{}) *PodInterface_Evict_Call {
	return &PodInterface_Evict_Call{Call: _e.mock.On("Evict", ctx, eviction)}
}

func (_c *PodInterface_Evict_Call) Run(run func(ctx context.Context, eviction *v1beta1.Eviction)) *PodInterface_Evict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1beta1.Eviction
		if args[1] != nil {
			arg1 = args[1].(*v1beta1.Eviction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PodInterface_Evict_Call) Return(err error) *PodInterface_Evict_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PodInterface_Evict_Call) RunAndReturn(run func(ctx context.Context, eviction *v1beta1.Eviction) error) *PodInterface_Evict_Call {
	_c.Call.Return(run)
	return _c
}

// EvictV1 provides a mock function for the type PodInterface
func (_mock *PodInterface) EvictV1(ctx context.Context, eviction *v12.Eviction) error {
	ret := _mock.Called(ctx, eviction)

	if len(ret) == 0 {
		panic("no return value specified for EvictV1")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v12.Eviction) error); ok {
		r0 = returnFunc(ctx, eviction)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PodInterface_EvictV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvictV1'
type PodInterface_EvictV1_Call struct {
	*mock.Call
}

// EvictV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - eviction *v12.Eviction
func (_e *PodInterface_Expecter) EvictV1(ctx interface{}, eviction interface{}) *PodInterface_EvictV1_Call {
	return &PodInterface_EvictV1_Call{Call: _e.mock.On("EvictV1", ctx, eviction)}
}

func (_c *PodInterface_EvictV1_Call) Run(run func(ctx context.Context, eviction *v12.Eviction)) *PodInterface_EvictV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v12.Eviction
		if args[1] != nil {
			arg1 = args[1].(*v12.Eviction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PodInterface_EvictV1_Call) Return(err error) *PodInterface_EvictV1_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PodInterface_EvictV1_Call) RunAndReturn(run func(ctx context.Context, eviction *v12.Eviction) error) *PodInterface_EvictV1_Call {
	_c.Call.Return(run)
	return _c
}

// EvictV1beta1 provides a mock function for the type PodInterface
func (_mock *PodInterface) EvictV1beta1(ctx context.Context, eviction *v1beta1.Eviction) error {
	ret := _mock.Called(ctx, eviction)

	if len(ret) == 0 {
		panic("no return value specified for EvictV1beta1")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.Eviction) error); ok {
		r0 = returnFunc(ctx, eviction)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PodInterface_EvictV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvictV1beta1'
type PodInterface_EvictV1beta1_Call struct {
	*mock.Call
}

// EvictV1beta1 is a helper method to define mock.On call
//   - ctx context.Context
//   - eviction *v1beta1.Eviction
func (_e *PodInterface_Expecter) EvictV1beta1(ctx interface{}, eviction interface{}) *PodInterface_EvictV1beta1_Call {
	return &PodInterface_EvictV1beta1_Call{Call: _e.mock.On("EvictV1beta1", ctx, eviction)}
}

func (_c *PodInterface_EvictV1beta1_Call) Run(run func(ctx context.Context, eviction *v1beta1.Eviction)) *PodInterface_EvictV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1beta1.Eviction
		if args[1] != nil {
			arg1 = args[1].(*v1beta1.Eviction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PodInterface_EvictV1beta1_Call) Return(err error) *PodInterface_EvictV1beta1_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PodInterface_EvictV1beta1_Call) RunAndReturn(run func(ctx context.Context, eviction *v1beta1.Eviction) error) *PodInterface_EvictV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type PodInterface
func (_mock *PodInterface) Get(ctx context.Context, name string, opts v10.GetOptions) (*v11.Pod, error) {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v11.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) (*v11.Pod, error)); ok {
		return returnFunc(ctx, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v10.GetOptions) *v11.Pod); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.Pod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v10.GetOptions) error); ok {
		r1 = returnFunc(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PodInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v10.GetOptions
func (_e *PodInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *PodInterface_Get_Call {
	return &PodInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *PodInterface_Get_Call) Run(run func(ctx context.Context, name string, opts v10.GetOptions)) *PodInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v10.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v10.GetOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PodInterface_Get_Call) Return(pod *v11.Pod, err error) *PodInterface_Get_Call {
	_c.Call.Return(pod, err)
	return _c
}

func (_c *PodInterface_Get_Call) RunAndReturn(run func(ctx context.Context, name string, opts v10.GetOptions) (*v11.Pod, error)) *PodInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function for the type PodInterface
func (_mock *PodInterface) GetLogs(name string, opts *v11.PodLogOptions) *rest.Request {
	ret := _mock.Called(name, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 *rest.Request
	if returnFunc, ok := ret.Get(0).(func(string, *v11.PodLogOptions) *rest.Request); ok {
		r0 = returnFunc(name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}
	return r0
}

// PodInterface_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type PodInterface_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - name string
//   - opts *v11.PodLogOptions
func (_e *PodInterface_Expecter) GetLogs(name interface{}, opts interface{}) *PodInterface_GetLogs_Call {
	return &PodInterface_GetLogs_Call{Call: _e.mock.On("GetLogs", name, opts)}
}

func (_c *PodInterface_GetLogs_Call) Run(run func(name string, opts *v11.PodLogOptions)) *PodInterface_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *v11.PodLogOptions
		if args[1] != nil {
			arg1 = args[1].(*v11.PodLogOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PodInterface_GetLogs_Call) Return(request *rest.Request) *PodInterface_GetLogs_Call {
	_c.Call.Return(request)
	return _c
}

func (_c *PodInterface_GetLogs_Call) RunAndReturn(run func(name string, opts *v11.PodLogOptions) *rest.Request) *PodInterface_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type PodInterface
func (_mock *PodInterface) List(ctx context.Context, opts v10.ListOptions) (*v11.PodList, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v11.PodList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) (*v11.PodList, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) *v11.PodList); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.PodList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v10.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PodInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.ListOptions
func (_e *PodInterface_Expecter) List(ctx interface{}, opts interface{}) *PodInterface_List_Call {
	return &PodInterface_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *PodInterface_List_Call) Run(run func(ctx context.Context, opts v10.ListOptions)) *PodInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PodInterface_List_Call) Return(podList *v11.PodList, err error) *PodInterface_List_Call {
	_c.Call.Return(podList, err)
	return _c
}

func (_c *PodInterface_List_Call) RunAndReturn(run func(ctx context.Context, opts v10.ListOptions) (*v11.PodList, error)) *PodInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function for the type PodInterface
func (_mock *PodInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string) (*v11.Pod, error) {
	var tmpRet mock.Arguments
	if len(subresources) > 0 {
		tmpRet = _mock.Called(ctx, name, pt, data, opts, subresources)
	} else {
		tmpRet = _mock.Called(ctx, name, pt, data, opts)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *v11.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v11.Pod, error)); ok {
		return returnFunc(ctx, name, pt, data, opts, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) *v11.Pod); ok {
		r0 = returnFunc(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.Pod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type PodInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - opts v10.PatchOptions
//   - subresources ...string
func (_e *PodInterface_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, opts interface{}, subresources ...interface{}) *PodInterface_Patch_Call {
	return &PodInterface_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, opts}, subresources...)...)}
}

func (_c *PodInterface_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string)) *PodInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.PatchType
		if args[2] != nil {
			arg2 = args[2].(types.PatchType)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		var arg4 v10.PatchOptions
		if args[4] != nil {
			arg4 = args[4].(v10.PatchOptions)
		}
		var arg5 []string
		var variadicArgs []string
		if len(args) > 5 {
			variadicArgs = args[5].([]string)
		}
		arg5 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5...,
		)
	})
	return _c
}

func (_c *PodInterface_Patch_Call) Return(result *v11.Pod, err error) *PodInterface_Patch_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *PodInterface_Patch_Call) RunAndReturn(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string) (*v11.Pod, error)) *PodInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// ProxyGet provides a mock function for the type PodInterface
func (_mock *PodInterface) ProxyGet(scheme string, name string, port string, path string, params map[string]string) rest.ResponseWrapper {
	ret := _mock.Called(scheme, name, port, path, params)

	if len(ret) == 0 {
		panic("no return value specified for ProxyGet")
	}

	var r0 rest.ResponseWrapper
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, map[string]string) rest.ResponseWrapper); ok {
		r0 = returnFunc(scheme, name, port, path, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.ResponseWrapper)
		}
	}
	return r0
}

// PodInterface_ProxyGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProxyGet'
type PodInterface_ProxyGet_Call struct {
	*mock.Call
}

// ProxyGet is a helper method to define mock.On call
//   - scheme string
//   - name string
//   - port string
//   - path string
//   - params map[string]string
func (_e *PodInterface_Expecter) ProxyGet(scheme interface{}, name interface{}, port interface{}, path interface{}, params interface{}) *PodInterface_ProxyGet_Call {
	return &PodInterface_ProxyGet_Call{Call: _e.mock.On("ProxyGet", scheme, name, port, path, params)}
}

func (_c *PodInterface_ProxyGet_Call) Run(run func(scheme string, name string, port string, path string, params map[string]string)) *PodInterface_ProxyGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 map[string]string
		if args[4] != nil {
			arg4 = args[4].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *PodInterface_ProxyGet_Call) Return(responseWrapper rest.ResponseWrapper) *PodInterface_ProxyGet_Call {
	_c.Call.Return(responseWrapper)
	return _c
}

func (_c *PodInterface_ProxyGet_Call) RunAndReturn(run func(scheme string, name string, port string, path string, params map[string]string) rest.ResponseWrapper) *PodInterface_ProxyGet_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type PodInterface
func (_mock *PodInterface) Update(ctx context.Context, pod *v11.Pod, opts v10.UpdateOptions) (*v11.Pod, error) {
	ret := _mock.Called(ctx, pod, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v11.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.Pod, v10.UpdateOptions) (*v11.Pod, error)); ok {
		return returnFunc(ctx, pod, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.Pod, v10.UpdateOptions) *v11.Pod); ok {
		r0 = returnFunc(ctx, pod, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.Pod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v11.Pod, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, pod, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PodInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - pod *v11.Pod
//   - opts v10.UpdateOptions
func (_e *PodInterface_Expecter) Update(ctx interface{}, pod interface{}, opts interface{}) *PodInterface_Update_Call {
	return &PodInterface_Update_Call{Call: _e.mock.On("Update", ctx, pod, opts)}
}

func (_c *PodInterface_Update_Call) Run(run func(ctx context.Context, pod *v11.Pod, opts v10.UpdateOptions)) *PodInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.Pod
		if args[1] != nil {
			arg1 = args[1].(*v11.Pod)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PodInterface_Update_Call) Return(pod1 *v11.Pod, err error) *PodInterface_Update_Call {
	_c.Call.Return(pod1, err)
	return _c
}

func (_c *PodInterface_Update_Call) RunAndReturn(run func(ctx context.Context, pod *v11.Pod, opts v10.UpdateOptions) (*v11.Pod, error)) *PodInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEphemeralContainers provides a mock function for the type PodInterface
func (_mock *PodInterface) UpdateEphemeralContainers(ctx context.Context, podName string, pod *v11.Pod, opts v10.UpdateOptions) (*v11.Pod, error) {
	ret := _mock.Called(ctx, podName, pod, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEphemeralContainers")
	}

	var r0 *v11.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *v11.Pod, v10.UpdateOptions) (*v11.Pod, error)); ok {
		return returnFunc(ctx, podName, pod, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *v11.Pod, v10.UpdateOptions) *v11.Pod); ok {
		r0 = returnFunc(ctx, podName, pod, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.Pod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *v11.Pod, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, podName, pod, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_UpdateEphemeralContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEphemeralContainers'
type PodInterface_UpdateEphemeralContainers_Call struct {
	*mock.Call
}

// UpdateEphemeralContainers is a helper method to define mock.On call
//   - ctx context.Context
//   - podName string
//   - pod *v11.Pod
//   - opts v10.UpdateOptions
func (_e *PodInterface_Expecter) UpdateEphemeralContainers(ctx interface{}, podName interface{}, pod interface{}, opts interface{}) *PodInterface_UpdateEphemeralContainers_Call {
	return &PodInterface_UpdateEphemeralContainers_Call{Call: _e.mock.On("UpdateEphemeralContainers", ctx, podName, pod, opts)}
}

func (_c *PodInterface_UpdateEphemeralContainers_Call) Run(run func(ctx context.Context, podName string, pod *v11.Pod, opts v10.UpdateOptions)) *PodInterface_UpdateEphemeralContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *v11.Pod
		if args[2] != nil {
			arg2 = args[2].(*v11.Pod)
		}
		var arg3 v10.UpdateOptions
		if args[3] != nil {
			arg3 = args[3].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PodInterface_UpdateEphemeralContainers_Call) Return(pod1 *v11.Pod, err error) *PodInterface_UpdateEphemeralContainers_Call {
	_c.Call.Return(pod1, err)
	return _c
}

func (_c *PodInterface_UpdateEphemeralContainers_Call) RunAndReturn(run func(ctx context.Context, podName string, pod *v11.Pod, opts v10.UpdateOptions) (*v11.Pod, error)) *PodInterface_UpdateEphemeralContainers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateResize provides a mock function for the type PodInterface
func (_mock *PodInterface) UpdateResize(ctx context.Context, podName string, pod *v11.Pod, opts v10.UpdateOptions) (*v11.Pod, error) {
	ret := _mock.Called(ctx, podName, pod, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResize")
	}

	var r0 *v11.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *v11.Pod, v10.UpdateOptions) (*v11.Pod, error)); ok {
		return returnFunc(ctx, podName, pod, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *v11.Pod, v10.UpdateOptions) *v11.Pod); ok {
		r0 = returnFunc(ctx, podName, pod, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.Pod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *v11.Pod, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, podName, pod, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_UpdateResize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateResize'
type PodInterface_UpdateResize_Call struct {
	*mock.Call
}

// UpdateResize is a helper method to define mock.On call
//   - ctx context.Context
//   - podName string
//   - pod *v11.Pod
//   - opts v10.UpdateOptions
func (_e *PodInterface_Expecter) UpdateResize(ctx interface{}, podName interface{}, pod interface{}, opts interface{}) *PodInterface_UpdateResize_Call {
	return &PodInterface_UpdateResize_Call{Call: _e.mock.On("UpdateResize", ctx, podName, pod, opts)}
}

func (_c *PodInterface_UpdateResize_Call) Run(run func(ctx context.Context, podName string, pod *v11.Pod, opts v10.UpdateOptions)) *PodInterface_UpdateResize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *v11.Pod
		if args[2] != nil {
			arg2 = args[2].(*v11.Pod)
		}
		var arg3 v10.UpdateOptions
		if args[3] != nil {
			arg3 = args[3].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PodInterface_UpdateResize_Call) Return(pod1 *v11.Pod, err error) *PodInterface_UpdateResize_Call {
	_c.Call.Return(pod1, err)
	return _c
}

func (_c *PodInterface_UpdateResize_Call) RunAndReturn(run func(ctx context.Context, podName string, pod *v11.Pod, opts v10.UpdateOptions) (*v11.Pod, error)) *PodInterface_UpdateResize_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type PodInterface
func (_mock *PodInterface) UpdateStatus(ctx context.Context, pod *v11.Pod, opts v10.UpdateOptions) (*v11.Pod, error) {
	ret := _mock.Called(ctx, pod, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *v11.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.Pod, v10.UpdateOptions) (*v11.Pod, error)); ok {
		return returnFunc(ctx, pod, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v11.Pod, v10.UpdateOptions) *v11.Pod); ok {
		r0 = returnFunc(ctx, pod, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v11.Pod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v11.Pod, v10.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, pod, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type PodInterface_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - pod *v11.Pod
//   - opts v10.UpdateOptions
func (_e *PodInterface_Expecter) UpdateStatus(ctx interface{}, pod interface{}, opts interface{}) *PodInterface_UpdateStatus_Call {
	return &PodInterface_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, pod, opts)}
}

func (_c *PodInterface_UpdateStatus_Call) Run(run func(ctx context.Context, pod *v11.Pod, opts v10.UpdateOptions)) *PodInterface_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v11.Pod
		if args[1] != nil {
			arg1 = args[1].(*v11.Pod)
		}
		var arg2 v10.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v10.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PodInterface_UpdateStatus_Call) Return(pod1 *v11.Pod, err error) *PodInterface_UpdateStatus_Call {
	_c.Call.Return(pod1, err)
	return _c
}

func (_c *PodInterface_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, pod *v11.Pod, opts v10.UpdateOptions) (*v11.Pod, error)) *PodInterface_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type PodInterface
func (_mock *PodInterface) Watch(ctx context.Context, opts v10.ListOptions) (watch.Interface, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) (watch.Interface, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ListOptions) watch.Interface); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v10.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PodInterface_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type PodInterface_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v10.ListOptions
func (_e *PodInterface_Expecter) Watch(ctx interface{}, opts interface{}) *PodInterface_Watch_Call {
	return &PodInterface_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *PodInterface_Watch_Call) Run(run func(ctx context.Context, opts v10.ListOptions)) *PodInterface_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v10.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PodInterface_Watch_Call) Return(interfaceParam watch.Interface, err error) *PodInterface_Watch_Call {
	_c.Call.Return(interfaceParam, err)
	return _c
}

func (_c *PodInterface_Watch_Call) RunAndReturn(run func(ctx context.Context, opts v10.ListOptions) (watch.Interface, error)) *PodInterface_Watch_Call {
	_c.Call.Return(run)
	return _c
}
