// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Dynatrace/dynatrace-operator/pkg/webhook"
	mock "github.com/stretchr/testify/mock"
)

// NewPodInjector creates a new instance of PodInjector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPodInjector(t interface {
	mock.TestingT
	Cleanup(func())
}) *PodInjector {
	mock := &PodInjector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PodInjector is an autogenerated mock type for the PodInjector type
type PodInjector struct {
	mock.Mock
}

type PodInjector_Expecter struct {
	mock *mock.Mock
}

func (_m *PodInjector) EXPECT() *PodInjector_Expecter {
	return &PodInjector_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type PodInjector
func (_mock *PodInjector) Handle(context1 context.Context, mutationRequest *webhook.MutationRequest) error {
	ret := _mock.Called(context1, mutationRequest)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *webhook.MutationRequest) error); ok {
		r0 = returnFunc(context1, mutationRequest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PodInjector_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type PodInjector_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - context1 context.Context
//   - mutationRequest *webhook.MutationRequest
func (_e *PodInjector_Expecter) Handle(context1 interface{}, mutationRequest interface{}) *PodInjector_Handle_Call {
	return &PodInjector_Handle_Call{Call: _e.mock.On("Handle", context1, mutationRequest)}
}

func (_c *PodInjector_Handle_Call) Run(run func(context1 context.Context, mutationRequest *webhook.MutationRequest)) *PodInjector_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *webhook.MutationRequest
		if args[1] != nil {
			arg1 = args[1].(*webhook.MutationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PodInjector_Handle_Call) Return(err error) *PodInjector_Handle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PodInjector_Handle_Call) RunAndReturn(run func(context1 context.Context, mutationRequest *webhook.MutationRequest) error) *PodInjector_Handle_Call {
	_c.Call.Return(run)
	return _c
}
