// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/Dynatrace/dynatrace-operator/pkg/webhook/mutation/pod/common"
	mock "github.com/stretchr/testify/mock"
)

// Mutator is an autogenerated mock type for the Mutator type
type Mutator struct {
	mock.Mock
}

type Mutator_Expecter struct {
	mock *mock.Mock
}

func (_m *Mutator) EXPECT() *Mutator_Expecter {
	return &Mutator_Expecter{mock: &_m.Mock}
}

// IsEnabled provides a mock function with given fields: request
func (_m *Mutator) IsEnabled(request *common.BaseRequest) bool {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*common.BaseRequest) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Mutator_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type Mutator_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
//   - request *common.BaseRequest
func (_e *Mutator_Expecter) IsEnabled(request interface{}) *Mutator_IsEnabled_Call {
	return &Mutator_IsEnabled_Call{Call: _e.mock.On("IsEnabled", request)}
}

func (_c *Mutator_IsEnabled_Call) Run(run func(request *common.BaseRequest)) *Mutator_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.BaseRequest))
	})
	return _c
}

func (_c *Mutator_IsEnabled_Call) Return(_a0 bool) *Mutator_IsEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mutator_IsEnabled_Call) RunAndReturn(run func(*common.BaseRequest) bool) *Mutator_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// IsInjected provides a mock function with given fields: request
func (_m *Mutator) IsInjected(request *common.BaseRequest) bool {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for IsInjected")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*common.BaseRequest) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Mutator_IsInjected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInjected'
type Mutator_IsInjected_Call struct {
	*mock.Call
}

// IsInjected is a helper method to define mock.On call
//   - request *common.BaseRequest
func (_e *Mutator_Expecter) IsInjected(request interface{}) *Mutator_IsInjected_Call {
	return &Mutator_IsInjected_Call{Call: _e.mock.On("IsInjected", request)}
}

func (_c *Mutator_IsInjected_Call) Run(run func(request *common.BaseRequest)) *Mutator_IsInjected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.BaseRequest))
	})
	return _c
}

func (_c *Mutator_IsInjected_Call) Return(_a0 bool) *Mutator_IsInjected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mutator_IsInjected_Call) RunAndReturn(run func(*common.BaseRequest) bool) *Mutator_IsInjected_Call {
	_c.Call.Return(run)
	return _c
}

// Mutate provides a mock function with given fields: request
func (_m *Mutator) Mutate(request *common.MutationRequest) error {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Mutate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.MutationRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mutator_Mutate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mutate'
type Mutator_Mutate_Call struct {
	*mock.Call
}

// Mutate is a helper method to define mock.On call
//   - request *common.MutationRequest
func (_e *Mutator_Expecter) Mutate(request interface{}) *Mutator_Mutate_Call {
	return &Mutator_Mutate_Call{Call: _e.mock.On("Mutate", request)}
}

func (_c *Mutator_Mutate_Call) Run(run func(request *common.MutationRequest)) *Mutator_Mutate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.MutationRequest))
	})
	return _c
}

func (_c *Mutator_Mutate_Call) Return(_a0 error) *Mutator_Mutate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mutator_Mutate_Call) RunAndReturn(run func(*common.MutationRequest) error) *Mutator_Mutate_Call {
	_c.Call.Return(run)
	return _c
}

// Reinvoke provides a mock function with given fields: request
func (_m *Mutator) Reinvoke(request *common.ReinvocationRequest) bool {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Reinvoke")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*common.ReinvocationRequest) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Mutator_Reinvoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reinvoke'
type Mutator_Reinvoke_Call struct {
	*mock.Call
}

// Reinvoke is a helper method to define mock.On call
//   - request *common.ReinvocationRequest
func (_e *Mutator_Expecter) Reinvoke(request interface{}) *Mutator_Reinvoke_Call {
	return &Mutator_Reinvoke_Call{Call: _e.mock.On("Reinvoke", request)}
}

func (_c *Mutator_Reinvoke_Call) Run(run func(request *common.ReinvocationRequest)) *Mutator_Reinvoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.ReinvocationRequest))
	})
	return _c
}

func (_c *Mutator_Reinvoke_Call) Return(_a0 bool) *Mutator_Reinvoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mutator_Reinvoke_Call) RunAndReturn(run func(*common.ReinvocationRequest) bool) *Mutator_Reinvoke_Call {
	_c.Call.Return(run)
	return _c
}

// NewMutator creates a new instance of Mutator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMutator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mutator {
	mock := &Mutator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
