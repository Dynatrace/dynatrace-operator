// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Dynatrace/dynatrace-operator/pkg/webhook"
	mock "github.com/stretchr/testify/mock"
)

// NewPodMutator creates a new instance of PodMutator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPodMutator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PodMutator {
	mock := &PodMutator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PodMutator is an autogenerated mock type for the PodMutator type
type PodMutator struct {
	mock.Mock
}

type PodMutator_Expecter struct {
	mock *mock.Mock
}

func (_m *PodMutator) EXPECT() *PodMutator_Expecter {
	return &PodMutator_Expecter{mock: &_m.Mock}
}

// Enabled provides a mock function for the type PodMutator
func (_mock *PodMutator) Enabled(request *webhook.BaseRequest) bool {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*webhook.BaseRequest) bool); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// PodMutator_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type PodMutator_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
//   - request *webhook.BaseRequest
func (_e *PodMutator_Expecter) Enabled(request interface{}) *PodMutator_Enabled_Call {
	return &PodMutator_Enabled_Call{Call: _e.mock.On("Enabled", request)}
}

func (_c *PodMutator_Enabled_Call) Run(run func(request *webhook.BaseRequest)) *PodMutator_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *webhook.BaseRequest
		if args[0] != nil {
			arg0 = args[0].(*webhook.BaseRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PodMutator_Enabled_Call) Return(b bool) *PodMutator_Enabled_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *PodMutator_Enabled_Call) RunAndReturn(run func(request *webhook.BaseRequest) bool) *PodMutator_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// Injected provides a mock function for the type PodMutator
func (_mock *PodMutator) Injected(request *webhook.BaseRequest) bool {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Injected")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*webhook.BaseRequest) bool); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// PodMutator_Injected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Injected'
type PodMutator_Injected_Call struct {
	*mock.Call
}

// Injected is a helper method to define mock.On call
//   - request *webhook.BaseRequest
func (_e *PodMutator_Expecter) Injected(request interface{}) *PodMutator_Injected_Call {
	return &PodMutator_Injected_Call{Call: _e.mock.On("Injected", request)}
}

func (_c *PodMutator_Injected_Call) Run(run func(request *webhook.BaseRequest)) *PodMutator_Injected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *webhook.BaseRequest
		if args[0] != nil {
			arg0 = args[0].(*webhook.BaseRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PodMutator_Injected_Call) Return(b bool) *PodMutator_Injected_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *PodMutator_Injected_Call) RunAndReturn(run func(request *webhook.BaseRequest) bool) *PodMutator_Injected_Call {
	_c.Call.Return(run)
	return _c
}

// Mutate provides a mock function for the type PodMutator
func (_mock *PodMutator) Mutate(ctx context.Context, request *webhook.MutationRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Mutate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *webhook.MutationRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PodMutator_Mutate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mutate'
type PodMutator_Mutate_Call struct {
	*mock.Call
}

// Mutate is a helper method to define mock.On call
//   - ctx context.Context
//   - request *webhook.MutationRequest
func (_e *PodMutator_Expecter) Mutate(ctx interface{}, request interface{}) *PodMutator_Mutate_Call {
	return &PodMutator_Mutate_Call{Call: _e.mock.On("Mutate", ctx, request)}
}

func (_c *PodMutator_Mutate_Call) Run(run func(ctx context.Context, request *webhook.MutationRequest)) *PodMutator_Mutate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *webhook.MutationRequest
		if args[1] != nil {
			arg1 = args[1].(*webhook.MutationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PodMutator_Mutate_Call) Return(err error) *PodMutator_Mutate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PodMutator_Mutate_Call) RunAndReturn(run func(ctx context.Context, request *webhook.MutationRequest) error) *PodMutator_Mutate_Call {
	_c.Call.Return(run)
	return _c
}

// Reinvoke provides a mock function for the type PodMutator
func (_mock *PodMutator) Reinvoke(request *webhook.ReinvocationRequest) bool {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Reinvoke")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*webhook.ReinvocationRequest) bool); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// PodMutator_Reinvoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reinvoke'
type PodMutator_Reinvoke_Call struct {
	*mock.Call
}

// Reinvoke is a helper method to define mock.On call
//   - request *webhook.ReinvocationRequest
func (_e *PodMutator_Expecter) Reinvoke(request interface{}) *PodMutator_Reinvoke_Call {
	return &PodMutator_Reinvoke_Call{Call: _e.mock.On("Reinvoke", request)}
}

func (_c *PodMutator_Reinvoke_Call) Run(run func(request *webhook.ReinvocationRequest)) *PodMutator_Reinvoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *webhook.ReinvocationRequest
		if args[0] != nil {
			arg0 = args[0].(*webhook.ReinvocationRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PodMutator_Reinvoke_Call) Return(b bool) *PodMutator_Reinvoke_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *PodMutator_Reinvoke_Call) RunAndReturn(run func(request *webhook.ReinvocationRequest) bool) *PodMutator_Reinvoke_Call {
	_c.Call.Return(run)
	return _c
}
