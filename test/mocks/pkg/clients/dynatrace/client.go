// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	dynatrace "github.com/Dynatrace/dynatrace-operator/pkg/clients/dynatrace"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateKubernetesAppSetting provides a mock function with given fields: ctx, scope
func (_m *Client) CreateOrUpdateKubernetesAppSetting(ctx context.Context, scope string) (string, error) {
	ret := _m.Called(ctx, scope)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateKubernetesAppSetting")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, scope)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, scope)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateOrUpdateKubernetesAppSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateKubernetesAppSetting'
type Client_CreateOrUpdateKubernetesAppSetting_Call struct {
	*mock.Call
}

// CreateOrUpdateKubernetesAppSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - scope string
func (_e *Client_Expecter) CreateOrUpdateKubernetesAppSetting(ctx interface{}, scope interface{}) *Client_CreateOrUpdateKubernetesAppSetting_Call {
	return &Client_CreateOrUpdateKubernetesAppSetting_Call{Call: _e.mock.On("CreateOrUpdateKubernetesAppSetting", ctx, scope)}
}

func (_c *Client_CreateOrUpdateKubernetesAppSetting_Call) Run(run func(ctx context.Context, scope string)) *Client_CreateOrUpdateKubernetesAppSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_CreateOrUpdateKubernetesAppSetting_Call) Return(_a0 string, _a1 error) *Client_CreateOrUpdateKubernetesAppSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateOrUpdateKubernetesAppSetting_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Client_CreateOrUpdateKubernetesAppSetting_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateKubernetesSetting provides a mock function with given fields: ctx, name, kubeSystemUUID, scope
func (_m *Client) CreateOrUpdateKubernetesSetting(ctx context.Context, name string, kubeSystemUUID string, scope string) (string, error) {
	ret := _m.Called(ctx, name, kubeSystemUUID, scope)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateKubernetesSetting")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, name, kubeSystemUUID, scope)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, name, kubeSystemUUID, scope)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, kubeSystemUUID, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateOrUpdateKubernetesSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateKubernetesSetting'
type Client_CreateOrUpdateKubernetesSetting_Call struct {
	*mock.Call
}

// CreateOrUpdateKubernetesSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - kubeSystemUUID string
//   - scope string
func (_e *Client_Expecter) CreateOrUpdateKubernetesSetting(ctx interface{}, name interface{}, kubeSystemUUID interface{}, scope interface{}) *Client_CreateOrUpdateKubernetesSetting_Call {
	return &Client_CreateOrUpdateKubernetesSetting_Call{Call: _e.mock.On("CreateOrUpdateKubernetesSetting", ctx, name, kubeSystemUUID, scope)}
}

func (_c *Client_CreateOrUpdateKubernetesSetting_Call) Run(run func(ctx context.Context, name string, kubeSystemUUID string, scope string)) *Client_CreateOrUpdateKubernetesSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Client_CreateOrUpdateKubernetesSetting_Call) Return(_a0 string, _a1 error) *Client_CreateOrUpdateKubernetesSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateOrUpdateKubernetesSetting_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *Client_CreateOrUpdateKubernetesSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveGateAuthToken provides a mock function with given fields: ctx, dynakubeName
func (_m *Client) GetActiveGateAuthToken(ctx context.Context, dynakubeName string) (*dynatrace.ActiveGateAuthTokenInfo, error) {
	ret := _m.Called(ctx, dynakubeName)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveGateAuthToken")
	}

	var r0 *dynatrace.ActiveGateAuthTokenInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dynatrace.ActiveGateAuthTokenInfo, error)); ok {
		return rf(ctx, dynakubeName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dynatrace.ActiveGateAuthTokenInfo); ok {
		r0 = rf(ctx, dynakubeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynatrace.ActiveGateAuthTokenInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dynakubeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetActiveGateAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveGateAuthToken'
type Client_GetActiveGateAuthToken_Call struct {
	*mock.Call
}

// GetActiveGateAuthToken is a helper method to define mock.On call
//   - ctx context.Context
//   - dynakubeName string
func (_e *Client_Expecter) GetActiveGateAuthToken(ctx interface{}, dynakubeName interface{}) *Client_GetActiveGateAuthToken_Call {
	return &Client_GetActiveGateAuthToken_Call{Call: _e.mock.On("GetActiveGateAuthToken", ctx, dynakubeName)}
}

func (_c *Client_GetActiveGateAuthToken_Call) Run(run func(ctx context.Context, dynakubeName string)) *Client_GetActiveGateAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetActiveGateAuthToken_Call) Return(_a0 *dynatrace.ActiveGateAuthTokenInfo, _a1 error) *Client_GetActiveGateAuthToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetActiveGateAuthToken_Call) RunAndReturn(run func(context.Context, string) (*dynatrace.ActiveGateAuthTokenInfo, error)) *Client_GetActiveGateAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveGateConnectionInfo provides a mock function with given fields: ctx
func (_m *Client) GetActiveGateConnectionInfo(ctx context.Context) (dynatrace.ActiveGateConnectionInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveGateConnectionInfo")
	}

	var r0 dynatrace.ActiveGateConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (dynatrace.ActiveGateConnectionInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dynatrace.ActiveGateConnectionInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dynatrace.ActiveGateConnectionInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetActiveGateConnectionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveGateConnectionInfo'
type Client_GetActiveGateConnectionInfo_Call struct {
	*mock.Call
}

// GetActiveGateConnectionInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetActiveGateConnectionInfo(ctx interface{}) *Client_GetActiveGateConnectionInfo_Call {
	return &Client_GetActiveGateConnectionInfo_Call{Call: _e.mock.On("GetActiveGateConnectionInfo", ctx)}
}

func (_c *Client_GetActiveGateConnectionInfo_Call) Run(run func(ctx context.Context)) *Client_GetActiveGateConnectionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetActiveGateConnectionInfo_Call) Return(_a0 dynatrace.ActiveGateConnectionInfo, _a1 error) *Client_GetActiveGateConnectionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetActiveGateConnectionInfo_Call) RunAndReturn(run func(context.Context) (dynatrace.ActiveGateConnectionInfo, error)) *Client_GetActiveGateConnectionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgent provides a mock function with given fields: ctx, os, installerType, flavor, arch, version, technologies, skipMetadata, writer
func (_m *Client) GetAgent(ctx context.Context, os string, installerType string, flavor string, arch string, version string, technologies []string, skipMetadata bool, writer io.Writer) error {
	ret := _m.Called(ctx, os, installerType, flavor, arch, version, technologies, skipMetadata, writer)

	if len(ret) == 0 {
		panic("no return value specified for GetAgent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, []string, bool, io.Writer) error); ok {
		r0 = rf(ctx, os, installerType, flavor, arch, version, technologies, skipMetadata, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_GetAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgent'
type Client_GetAgent_Call struct {
	*mock.Call
}

// GetAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - os string
//   - installerType string
//   - flavor string
//   - arch string
//   - version string
//   - technologies []string
//   - skipMetadata bool
//   - writer io.Writer
func (_e *Client_Expecter) GetAgent(ctx interface{}, os interface{}, installerType interface{}, flavor interface{}, arch interface{}, version interface{}, technologies interface{}, skipMetadata interface{}, writer interface{}) *Client_GetAgent_Call {
	return &Client_GetAgent_Call{Call: _e.mock.On("GetAgent", ctx, os, installerType, flavor, arch, version, technologies, skipMetadata, writer)}
}

func (_c *Client_GetAgent_Call) Run(run func(ctx context.Context, os string, installerType string, flavor string, arch string, version string, technologies []string, skipMetadata bool, writer io.Writer)) *Client_GetAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].([]string), args[7].(bool), args[8].(io.Writer))
	})
	return _c
}

func (_c *Client_GetAgent_Call) Return(_a0 error) *Client_GetAgent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetAgent_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, []string, bool, io.Writer) error) *Client_GetAgent_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgentVersions provides a mock function with given fields: ctx, os, installerType, flavor, arch
func (_m *Client) GetAgentVersions(ctx context.Context, os string, installerType string, flavor string, arch string) ([]string, error) {
	ret := _m.Called(ctx, os, installerType, flavor, arch)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentVersions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) ([]string, error)); ok {
		return rf(ctx, os, installerType, flavor, arch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) []string); ok {
		r0 = rf(ctx, os, installerType, flavor, arch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, os, installerType, flavor, arch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetAgentVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentVersions'
type Client_GetAgentVersions_Call struct {
	*mock.Call
}

// GetAgentVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - os string
//   - installerType string
//   - flavor string
//   - arch string
func (_e *Client_Expecter) GetAgentVersions(ctx interface{}, os interface{}, installerType interface{}, flavor interface{}, arch interface{}) *Client_GetAgentVersions_Call {
	return &Client_GetAgentVersions_Call{Call: _e.mock.On("GetAgentVersions", ctx, os, installerType, flavor, arch)}
}

func (_c *Client_GetAgentVersions_Call) Run(run func(ctx context.Context, os string, installerType string, flavor string, arch string)) *Client_GetAgentVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *Client_GetAgentVersions_Call) Return(_a0 []string, _a1 error) *Client_GetAgentVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetAgentVersions_Call) RunAndReturn(run func(context.Context, string, string, string, string) ([]string, error)) *Client_GetAgentVersions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgentViaInstallerUrl provides a mock function with given fields: ctx, url, writer
func (_m *Client) GetAgentViaInstallerUrl(ctx context.Context, url string, writer io.Writer) error {
	ret := _m.Called(ctx, url, writer)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentViaInstallerUrl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer) error); ok {
		r0 = rf(ctx, url, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_GetAgentViaInstallerUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentViaInstallerUrl'
type Client_GetAgentViaInstallerUrl_Call struct {
	*mock.Call
}

// GetAgentViaInstallerUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - writer io.Writer
func (_e *Client_Expecter) GetAgentViaInstallerUrl(ctx interface{}, url interface{}, writer interface{}) *Client_GetAgentViaInstallerUrl_Call {
	return &Client_GetAgentViaInstallerUrl_Call{Call: _e.mock.On("GetAgentViaInstallerUrl", ctx, url, writer)}
}

func (_c *Client_GetAgentViaInstallerUrl_Call) Run(run func(ctx context.Context, url string, writer io.Writer)) *Client_GetAgentViaInstallerUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Writer))
	})
	return _c
}

func (_c *Client_GetAgentViaInstallerUrl_Call) Return(_a0 error) *Client_GetAgentViaInstallerUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetAgentViaInstallerUrl_Call) RunAndReturn(run func(context.Context, string, io.Writer) error) *Client_GetAgentViaInstallerUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommunicationHostForClient provides a mock function with given fields:
func (_m *Client) GetCommunicationHostForClient() (dynatrace.CommunicationHost, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCommunicationHostForClient")
	}

	var r0 dynatrace.CommunicationHost
	var r1 error
	if rf, ok := ret.Get(0).(func() (dynatrace.CommunicationHost, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() dynatrace.CommunicationHost); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dynatrace.CommunicationHost)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCommunicationHostForClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommunicationHostForClient'
type Client_GetCommunicationHostForClient_Call struct {
	*mock.Call
}

// GetCommunicationHostForClient is a helper method to define mock.On call
func (_e *Client_Expecter) GetCommunicationHostForClient() *Client_GetCommunicationHostForClient_Call {
	return &Client_GetCommunicationHostForClient_Call{Call: _e.mock.On("GetCommunicationHostForClient")}
}

func (_c *Client_GetCommunicationHostForClient_Call) Run(run func()) *Client_GetCommunicationHostForClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetCommunicationHostForClient_Call) Return(_a0 dynatrace.CommunicationHost, _a1 error) *Client_GetCommunicationHostForClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCommunicationHostForClient_Call) RunAndReturn(run func() (dynatrace.CommunicationHost, error)) *Client_GetCommunicationHostForClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntityIDForIP provides a mock function with given fields: ctx, ip
func (_m *Client) GetEntityIDForIP(ctx context.Context, ip string) (string, error) {
	ret := _m.Called(ctx, ip)

	if len(ret) == 0 {
		panic("no return value specified for GetEntityIDForIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ip)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetEntityIDForIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntityIDForIP'
type Client_GetEntityIDForIP_Call struct {
	*mock.Call
}

// GetEntityIDForIP is a helper method to define mock.On call
//   - ctx context.Context
//   - ip string
func (_e *Client_Expecter) GetEntityIDForIP(ctx interface{}, ip interface{}) *Client_GetEntityIDForIP_Call {
	return &Client_GetEntityIDForIP_Call{Call: _e.mock.On("GetEntityIDForIP", ctx, ip)}
}

func (_c *Client_GetEntityIDForIP_Call) Run(run func(ctx context.Context, ip string)) *Client_GetEntityIDForIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetEntityIDForIP_Call) Return(_a0 string, _a1 error) *Client_GetEntityIDForIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetEntityIDForIP_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Client_GetEntityIDForIP_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestActiveGateImage provides a mock function with given fields: ctx
func (_m *Client) GetLatestActiveGateImage(ctx context.Context) (*dynatrace.LatestImageInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestActiveGateImage")
	}

	var r0 *dynatrace.LatestImageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*dynatrace.LatestImageInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *dynatrace.LatestImageInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynatrace.LatestImageInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLatestActiveGateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestActiveGateImage'
type Client_GetLatestActiveGateImage_Call struct {
	*mock.Call
}

// GetLatestActiveGateImage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetLatestActiveGateImage(ctx interface{}) *Client_GetLatestActiveGateImage_Call {
	return &Client_GetLatestActiveGateImage_Call{Call: _e.mock.On("GetLatestActiveGateImage", ctx)}
}

func (_c *Client_GetLatestActiveGateImage_Call) Run(run func(ctx context.Context)) *Client_GetLatestActiveGateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetLatestActiveGateImage_Call) Return(_a0 *dynatrace.LatestImageInfo, _a1 error) *Client_GetLatestActiveGateImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLatestActiveGateImage_Call) RunAndReturn(run func(context.Context) (*dynatrace.LatestImageInfo, error)) *Client_GetLatestActiveGateImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestActiveGateVersion provides a mock function with given fields: ctx, os
func (_m *Client) GetLatestActiveGateVersion(ctx context.Context, os string) (string, error) {
	ret := _m.Called(ctx, os)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestActiveGateVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, os)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, os)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, os)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLatestActiveGateVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestActiveGateVersion'
type Client_GetLatestActiveGateVersion_Call struct {
	*mock.Call
}

// GetLatestActiveGateVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - os string
func (_e *Client_Expecter) GetLatestActiveGateVersion(ctx interface{}, os interface{}) *Client_GetLatestActiveGateVersion_Call {
	return &Client_GetLatestActiveGateVersion_Call{Call: _e.mock.On("GetLatestActiveGateVersion", ctx, os)}
}

func (_c *Client_GetLatestActiveGateVersion_Call) Run(run func(ctx context.Context, os string)) *Client_GetLatestActiveGateVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetLatestActiveGateVersion_Call) Return(_a0 string, _a1 error) *Client_GetLatestActiveGateVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLatestActiveGateVersion_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Client_GetLatestActiveGateVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestAgent provides a mock function with given fields: ctx, os, installerType, flavor, arch, technologies, skipMetadata, writer
func (_m *Client) GetLatestAgent(ctx context.Context, os string, installerType string, flavor string, arch string, technologies []string, skipMetadata bool, writer io.Writer) error {
	ret := _m.Called(ctx, os, installerType, flavor, arch, technologies, skipMetadata, writer)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestAgent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string, bool, io.Writer) error); ok {
		r0 = rf(ctx, os, installerType, flavor, arch, technologies, skipMetadata, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_GetLatestAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestAgent'
type Client_GetLatestAgent_Call struct {
	*mock.Call
}

// GetLatestAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - os string
//   - installerType string
//   - flavor string
//   - arch string
//   - technologies []string
//   - skipMetadata bool
//   - writer io.Writer
func (_e *Client_Expecter) GetLatestAgent(ctx interface{}, os interface{}, installerType interface{}, flavor interface{}, arch interface{}, technologies interface{}, skipMetadata interface{}, writer interface{}) *Client_GetLatestAgent_Call {
	return &Client_GetLatestAgent_Call{Call: _e.mock.On("GetLatestAgent", ctx, os, installerType, flavor, arch, technologies, skipMetadata, writer)}
}

func (_c *Client_GetLatestAgent_Call) Run(run func(ctx context.Context, os string, installerType string, flavor string, arch string, technologies []string, skipMetadata bool, writer io.Writer)) *Client_GetLatestAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]string), args[6].(bool), args[7].(io.Writer))
	})
	return _c
}

func (_c *Client_GetLatestAgent_Call) Return(_a0 error) *Client_GetLatestAgent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetLatestAgent_Call) RunAndReturn(run func(context.Context, string, string, string, string, []string, bool, io.Writer) error) *Client_GetLatestAgent_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestAgentVersion provides a mock function with given fields: ctx, os, installerType
func (_m *Client) GetLatestAgentVersion(ctx context.Context, os string, installerType string) (string, error) {
	ret := _m.Called(ctx, os, installerType)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestAgentVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, os, installerType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, os, installerType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, os, installerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLatestAgentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestAgentVersion'
type Client_GetLatestAgentVersion_Call struct {
	*mock.Call
}

// GetLatestAgentVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - os string
//   - installerType string
func (_e *Client_Expecter) GetLatestAgentVersion(ctx interface{}, os interface{}, installerType interface{}) *Client_GetLatestAgentVersion_Call {
	return &Client_GetLatestAgentVersion_Call{Call: _e.mock.On("GetLatestAgentVersion", ctx, os, installerType)}
}

func (_c *Client_GetLatestAgentVersion_Call) Run(run func(ctx context.Context, os string, installerType string)) *Client_GetLatestAgentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_GetLatestAgentVersion_Call) Return(_a0 string, _a1 error) *Client_GetLatestAgentVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLatestAgentVersion_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *Client_GetLatestAgentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestCodeModulesImage provides a mock function with given fields: ctx
func (_m *Client) GetLatestCodeModulesImage(ctx context.Context) (*dynatrace.LatestImageInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCodeModulesImage")
	}

	var r0 *dynatrace.LatestImageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*dynatrace.LatestImageInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *dynatrace.LatestImageInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynatrace.LatestImageInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLatestCodeModulesImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestCodeModulesImage'
type Client_GetLatestCodeModulesImage_Call struct {
	*mock.Call
}

// GetLatestCodeModulesImage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetLatestCodeModulesImage(ctx interface{}) *Client_GetLatestCodeModulesImage_Call {
	return &Client_GetLatestCodeModulesImage_Call{Call: _e.mock.On("GetLatestCodeModulesImage", ctx)}
}

func (_c *Client_GetLatestCodeModulesImage_Call) Run(run func(ctx context.Context)) *Client_GetLatestCodeModulesImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetLatestCodeModulesImage_Call) Return(_a0 *dynatrace.LatestImageInfo, _a1 error) *Client_GetLatestCodeModulesImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLatestCodeModulesImage_Call) RunAndReturn(run func(context.Context) (*dynatrace.LatestImageInfo, error)) *Client_GetLatestCodeModulesImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestOneAgentImage provides a mock function with given fields: ctx
func (_m *Client) GetLatestOneAgentImage(ctx context.Context) (*dynatrace.LatestImageInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestOneAgentImage")
	}

	var r0 *dynatrace.LatestImageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*dynatrace.LatestImageInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *dynatrace.LatestImageInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynatrace.LatestImageInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLatestOneAgentImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestOneAgentImage'
type Client_GetLatestOneAgentImage_Call struct {
	*mock.Call
}

// GetLatestOneAgentImage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetLatestOneAgentImage(ctx interface{}) *Client_GetLatestOneAgentImage_Call {
	return &Client_GetLatestOneAgentImage_Call{Call: _e.mock.On("GetLatestOneAgentImage", ctx)}
}

func (_c *Client_GetLatestOneAgentImage_Call) Run(run func(ctx context.Context)) *Client_GetLatestOneAgentImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetLatestOneAgentImage_Call) Return(_a0 *dynatrace.LatestImageInfo, _a1 error) *Client_GetLatestOneAgentImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLatestOneAgentImage_Call) RunAndReturn(run func(context.Context) (*dynatrace.LatestImageInfo, error)) *Client_GetLatestOneAgentImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMonitoredEntitiesForKubeSystemUUID provides a mock function with given fields: ctx, kubeSystemUUID
func (_m *Client) GetMonitoredEntitiesForKubeSystemUUID(ctx context.Context, kubeSystemUUID string) ([]dynatrace.MonitoredEntity, error) {
	ret := _m.Called(ctx, kubeSystemUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitoredEntitiesForKubeSystemUUID")
	}

	var r0 []dynatrace.MonitoredEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dynatrace.MonitoredEntity, error)); ok {
		return rf(ctx, kubeSystemUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dynatrace.MonitoredEntity); ok {
		r0 = rf(ctx, kubeSystemUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dynatrace.MonitoredEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, kubeSystemUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetMonitoredEntitiesForKubeSystemUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMonitoredEntitiesForKubeSystemUUID'
type Client_GetMonitoredEntitiesForKubeSystemUUID_Call struct {
	*mock.Call
}

// GetMonitoredEntitiesForKubeSystemUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - kubeSystemUUID string
func (_e *Client_Expecter) GetMonitoredEntitiesForKubeSystemUUID(ctx interface{}, kubeSystemUUID interface{}) *Client_GetMonitoredEntitiesForKubeSystemUUID_Call {
	return &Client_GetMonitoredEntitiesForKubeSystemUUID_Call{Call: _e.mock.On("GetMonitoredEntitiesForKubeSystemUUID", ctx, kubeSystemUUID)}
}

func (_c *Client_GetMonitoredEntitiesForKubeSystemUUID_Call) Run(run func(ctx context.Context, kubeSystemUUID string)) *Client_GetMonitoredEntitiesForKubeSystemUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetMonitoredEntitiesForKubeSystemUUID_Call) Return(_a0 []dynatrace.MonitoredEntity, _a1 error) *Client_GetMonitoredEntitiesForKubeSystemUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetMonitoredEntitiesForKubeSystemUUID_Call) RunAndReturn(run func(context.Context, string) ([]dynatrace.MonitoredEntity, error)) *Client_GetMonitoredEntitiesForKubeSystemUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneAgentConnectionInfo provides a mock function with given fields: ctx
func (_m *Client) GetOneAgentConnectionInfo(ctx context.Context) (dynatrace.OneAgentConnectionInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOneAgentConnectionInfo")
	}

	var r0 dynatrace.OneAgentConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (dynatrace.OneAgentConnectionInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dynatrace.OneAgentConnectionInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dynatrace.OneAgentConnectionInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetOneAgentConnectionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneAgentConnectionInfo'
type Client_GetOneAgentConnectionInfo_Call struct {
	*mock.Call
}

// GetOneAgentConnectionInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetOneAgentConnectionInfo(ctx interface{}) *Client_GetOneAgentConnectionInfo_Call {
	return &Client_GetOneAgentConnectionInfo_Call{Call: _e.mock.On("GetOneAgentConnectionInfo", ctx)}
}

func (_c *Client_GetOneAgentConnectionInfo_Call) Run(run func(ctx context.Context)) *Client_GetOneAgentConnectionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetOneAgentConnectionInfo_Call) Return(_a0 dynatrace.OneAgentConnectionInfo, _a1 error) *Client_GetOneAgentConnectionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetOneAgentConnectionInfo_Call) RunAndReturn(run func(context.Context) (dynatrace.OneAgentConnectionInfo, error)) *Client_GetOneAgentConnectionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessModuleConfig provides a mock function with given fields: ctx, prevRevision
func (_m *Client) GetProcessModuleConfig(ctx context.Context, prevRevision uint) (*dynatrace.ProcessModuleConfig, error) {
	ret := _m.Called(ctx, prevRevision)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessModuleConfig")
	}

	var r0 *dynatrace.ProcessModuleConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*dynatrace.ProcessModuleConfig, error)); ok {
		return rf(ctx, prevRevision)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *dynatrace.ProcessModuleConfig); ok {
		r0 = rf(ctx, prevRevision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynatrace.ProcessModuleConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, prevRevision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetProcessModuleConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessModuleConfig'
type Client_GetProcessModuleConfig_Call struct {
	*mock.Call
}

// GetProcessModuleConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - prevRevision uint
func (_e *Client_Expecter) GetProcessModuleConfig(ctx interface{}, prevRevision interface{}) *Client_GetProcessModuleConfig_Call {
	return &Client_GetProcessModuleConfig_Call{Call: _e.mock.On("GetProcessModuleConfig", ctx, prevRevision)}
}

func (_c *Client_GetProcessModuleConfig_Call) Run(run func(ctx context.Context, prevRevision uint)) *Client_GetProcessModuleConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *Client_GetProcessModuleConfig_Call) Return(_a0 *dynatrace.ProcessModuleConfig, _a1 error) *Client_GetProcessModuleConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetProcessModuleConfig_Call) RunAndReturn(run func(context.Context, uint) (*dynatrace.ProcessModuleConfig, error)) *Client_GetProcessModuleConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettingsForMonitoredEntities provides a mock function with given fields: ctx, monitoredEntities, schemaId
func (_m *Client) GetSettingsForMonitoredEntities(ctx context.Context, monitoredEntities []dynatrace.MonitoredEntity, schemaId string) (dynatrace.GetSettingsResponse, error) {
	ret := _m.Called(ctx, monitoredEntities, schemaId)

	if len(ret) == 0 {
		panic("no return value specified for GetSettingsForMonitoredEntities")
	}

	var r0 dynatrace.GetSettingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []dynatrace.MonitoredEntity, string) (dynatrace.GetSettingsResponse, error)); ok {
		return rf(ctx, monitoredEntities, schemaId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []dynatrace.MonitoredEntity, string) dynatrace.GetSettingsResponse); ok {
		r0 = rf(ctx, monitoredEntities, schemaId)
	} else {
		r0 = ret.Get(0).(dynatrace.GetSettingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []dynatrace.MonitoredEntity, string) error); ok {
		r1 = rf(ctx, monitoredEntities, schemaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetSettingsForMonitoredEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettingsForMonitoredEntities'
type Client_GetSettingsForMonitoredEntities_Call struct {
	*mock.Call
}

// GetSettingsForMonitoredEntities is a helper method to define mock.On call
//   - ctx context.Context
//   - monitoredEntities []dynatrace.MonitoredEntity
//   - schemaId string
func (_e *Client_Expecter) GetSettingsForMonitoredEntities(ctx interface{}, monitoredEntities interface{}, schemaId interface{}) *Client_GetSettingsForMonitoredEntities_Call {
	return &Client_GetSettingsForMonitoredEntities_Call{Call: _e.mock.On("GetSettingsForMonitoredEntities", ctx, monitoredEntities, schemaId)}
}

func (_c *Client_GetSettingsForMonitoredEntities_Call) Run(run func(ctx context.Context, monitoredEntities []dynatrace.MonitoredEntity, schemaId string)) *Client_GetSettingsForMonitoredEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]dynatrace.MonitoredEntity), args[2].(string))
	})
	return _c
}

func (_c *Client_GetSettingsForMonitoredEntities_Call) Return(_a0 dynatrace.GetSettingsResponse, _a1 error) *Client_GetSettingsForMonitoredEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetSettingsForMonitoredEntities_Call) RunAndReturn(run func(context.Context, []dynatrace.MonitoredEntity, string) (dynatrace.GetSettingsResponse, error)) *Client_GetSettingsForMonitoredEntities_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenScopes provides a mock function with given fields: ctx, token
func (_m *Client) GetTokenScopes(ctx context.Context, token string) (dynatrace.TokenScopes, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenScopes")
	}

	var r0 dynatrace.TokenScopes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dynatrace.TokenScopes, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dynatrace.TokenScopes); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynatrace.TokenScopes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetTokenScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenScopes'
type Client_GetTokenScopes_Call struct {
	*mock.Call
}

// GetTokenScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *Client_Expecter) GetTokenScopes(ctx interface{}, token interface{}) *Client_GetTokenScopes_Call {
	return &Client_GetTokenScopes_Call{Call: _e.mock.On("GetTokenScopes", ctx, token)}
}

func (_c *Client_GetTokenScopes_Call) Run(run func(ctx context.Context, token string)) *Client_GetTokenScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetTokenScopes_Call) Return(_a0 dynatrace.TokenScopes, _a1 error) *Client_GetTokenScopes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetTokenScopes_Call) RunAndReturn(run func(context.Context, string) (dynatrace.TokenScopes, error)) *Client_GetTokenScopes_Call {
	_c.Call.Return(run)
	return _c
}

// SendEvent provides a mock function with given fields: ctx, eventData
func (_m *Client) SendEvent(ctx context.Context, eventData *dynatrace.EventData) error {
	ret := _m.Called(ctx, eventData)

	if len(ret) == 0 {
		panic("no return value specified for SendEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynatrace.EventData) error); ok {
		r0 = rf(ctx, eventData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type Client_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - eventData *dynatrace.EventData
func (_e *Client_Expecter) SendEvent(ctx interface{}, eventData interface{}) *Client_SendEvent_Call {
	return &Client_SendEvent_Call{Call: _e.mock.On("SendEvent", ctx, eventData)}
}

func (_c *Client_SendEvent_Call) Run(run func(ctx context.Context, eventData *dynatrace.EventData)) *Client_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dynatrace.EventData))
	})
	return _c
}

func (_c *Client_SendEvent_Call) Return(_a0 error) *Client_SendEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_SendEvent_Call) RunAndReturn(run func(context.Context, *dynatrace.EventData) error) *Client_SendEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
