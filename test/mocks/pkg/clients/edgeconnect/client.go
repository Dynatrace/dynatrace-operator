// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/Dynatrace/dynatrace-operator/pkg/clients/edgeconnect"
	mock "github.com/stretchr/testify/mock"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateConnectionSetting provides a mock function for the type Client
func (_mock *Client) CreateConnectionSetting(es edgeconnect.EnvironmentSetting) error {
	ret := _mock.Called(es)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectionSetting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(edgeconnect.EnvironmentSetting) error); ok {
		r0 = returnFunc(es)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_CreateConnectionSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnectionSetting'
type Client_CreateConnectionSetting_Call struct {
	*mock.Call
}

// CreateConnectionSetting is a helper method to define mock.On call
//   - es edgeconnect.EnvironmentSetting
func (_e *Client_Expecter) CreateConnectionSetting(es interface{}) *Client_CreateConnectionSetting_Call {
	return &Client_CreateConnectionSetting_Call{Call: _e.mock.On("CreateConnectionSetting", es)}
}

func (_c *Client_CreateConnectionSetting_Call) Run(run func(es edgeconnect.EnvironmentSetting)) *Client_CreateConnectionSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 edgeconnect.EnvironmentSetting
		if args[0] != nil {
			arg0 = args[0].(edgeconnect.EnvironmentSetting)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_CreateConnectionSetting_Call) Return(err error) *Client_CreateConnectionSetting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_CreateConnectionSetting_Call) RunAndReturn(run func(es edgeconnect.EnvironmentSetting) error) *Client_CreateConnectionSetting_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEdgeConnect provides a mock function for the type Client
func (_mock *Client) CreateEdgeConnect(request *edgeconnect.Request) (edgeconnect.CreateResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateEdgeConnect")
	}

	var r0 edgeconnect.CreateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*edgeconnect.Request) (edgeconnect.CreateResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(*edgeconnect.Request) edgeconnect.CreateResponse); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Get(0).(edgeconnect.CreateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(*edgeconnect.Request) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CreateEdgeConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEdgeConnect'
type Client_CreateEdgeConnect_Call struct {
	*mock.Call
}

// CreateEdgeConnect is a helper method to define mock.On call
//   - request *edgeconnect.Request
func (_e *Client_Expecter) CreateEdgeConnect(request interface{}) *Client_CreateEdgeConnect_Call {
	return &Client_CreateEdgeConnect_Call{Call: _e.mock.On("CreateEdgeConnect", request)}
}

func (_c *Client_CreateEdgeConnect_Call) Run(run func(request *edgeconnect.Request)) *Client_CreateEdgeConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *edgeconnect.Request
		if args[0] != nil {
			arg0 = args[0].(*edgeconnect.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_CreateEdgeConnect_Call) Return(createResponse edgeconnect.CreateResponse, err error) *Client_CreateEdgeConnect_Call {
	_c.Call.Return(createResponse, err)
	return _c
}

func (_c *Client_CreateEdgeConnect_Call) RunAndReturn(run func(request *edgeconnect.Request) (edgeconnect.CreateResponse, error)) *Client_CreateEdgeConnect_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConnectionSetting provides a mock function for the type Client
func (_mock *Client) DeleteConnectionSetting(objectID string) error {
	ret := _mock.Called(objectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectionSetting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(objectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_DeleteConnectionSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConnectionSetting'
type Client_DeleteConnectionSetting_Call struct {
	*mock.Call
}

// DeleteConnectionSetting is a helper method to define mock.On call
//   - objectID string
func (_e *Client_Expecter) DeleteConnectionSetting(objectID interface{}) *Client_DeleteConnectionSetting_Call {
	return &Client_DeleteConnectionSetting_Call{Call: _e.mock.On("DeleteConnectionSetting", objectID)}
}

func (_c *Client_DeleteConnectionSetting_Call) Run(run func(objectID string)) *Client_DeleteConnectionSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_DeleteConnectionSetting_Call) Return(err error) *Client_DeleteConnectionSetting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_DeleteConnectionSetting_Call) RunAndReturn(run func(objectID string) error) *Client_DeleteConnectionSetting_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEdgeConnect provides a mock function for the type Client
func (_mock *Client) DeleteEdgeConnect(edgeConnectID string) error {
	ret := _mock.Called(edgeConnectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEdgeConnect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(edgeConnectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_DeleteEdgeConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEdgeConnect'
type Client_DeleteEdgeConnect_Call struct {
	*mock.Call
}

// DeleteEdgeConnect is a helper method to define mock.On call
//   - edgeConnectID string
func (_e *Client_Expecter) DeleteEdgeConnect(edgeConnectID interface{}) *Client_DeleteEdgeConnect_Call {
	return &Client_DeleteEdgeConnect_Call{Call: _e.mock.On("DeleteEdgeConnect", edgeConnectID)}
}

func (_c *Client_DeleteEdgeConnect_Call) Run(run func(edgeConnectID string)) *Client_DeleteEdgeConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_DeleteEdgeConnect_Call) Return(err error) *Client_DeleteEdgeConnect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_DeleteEdgeConnect_Call) RunAndReturn(run func(edgeConnectID string) error) *Client_DeleteEdgeConnect_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionSettings provides a mock function for the type Client
func (_mock *Client) GetConnectionSettings() ([]edgeconnect.EnvironmentSetting, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionSettings")
	}

	var r0 []edgeconnect.EnvironmentSetting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]edgeconnect.EnvironmentSetting, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []edgeconnect.EnvironmentSetting); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]edgeconnect.EnvironmentSetting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetConnectionSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionSettings'
type Client_GetConnectionSettings_Call struct {
	*mock.Call
}

// GetConnectionSettings is a helper method to define mock.On call
func (_e *Client_Expecter) GetConnectionSettings() *Client_GetConnectionSettings_Call {
	return &Client_GetConnectionSettings_Call{Call: _e.mock.On("GetConnectionSettings")}
}

func (_c *Client_GetConnectionSettings_Call) Run(run func()) *Client_GetConnectionSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetConnectionSettings_Call) Return(environmentSettings []edgeconnect.EnvironmentSetting, err error) *Client_GetConnectionSettings_Call {
	_c.Call.Return(environmentSettings, err)
	return _c
}

func (_c *Client_GetConnectionSettings_Call) RunAndReturn(run func() ([]edgeconnect.EnvironmentSetting, error)) *Client_GetConnectionSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeConnect provides a mock function for the type Client
func (_mock *Client) GetEdgeConnect(edgeConnectID string) (edgeconnect.GetResponse, error) {
	ret := _mock.Called(edgeConnectID)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeConnect")
	}

	var r0 edgeconnect.GetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (edgeconnect.GetResponse, error)); ok {
		return returnFunc(edgeConnectID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) edgeconnect.GetResponse); ok {
		r0 = returnFunc(edgeConnectID)
	} else {
		r0 = ret.Get(0).(edgeconnect.GetResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(edgeConnectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetEdgeConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeConnect'
type Client_GetEdgeConnect_Call struct {
	*mock.Call
}

// GetEdgeConnect is a helper method to define mock.On call
//   - edgeConnectID string
func (_e *Client_Expecter) GetEdgeConnect(edgeConnectID interface{}) *Client_GetEdgeConnect_Call {
	return &Client_GetEdgeConnect_Call{Call: _e.mock.On("GetEdgeConnect", edgeConnectID)}
}

func (_c *Client_GetEdgeConnect_Call) Run(run func(edgeConnectID string)) *Client_GetEdgeConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_GetEdgeConnect_Call) Return(getResponse edgeconnect.GetResponse, err error) *Client_GetEdgeConnect_Call {
	_c.Call.Return(getResponse, err)
	return _c
}

func (_c *Client_GetEdgeConnect_Call) RunAndReturn(run func(edgeConnectID string) (edgeconnect.GetResponse, error)) *Client_GetEdgeConnect_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeConnects provides a mock function for the type Client
func (_mock *Client) GetEdgeConnects(name string) (edgeconnect.ListResponse, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeConnects")
	}

	var r0 edgeconnect.ListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (edgeconnect.ListResponse, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) edgeconnect.ListResponse); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(edgeconnect.ListResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetEdgeConnects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeConnects'
type Client_GetEdgeConnects_Call struct {
	*mock.Call
}

// GetEdgeConnects is a helper method to define mock.On call
//   - name string
func (_e *Client_Expecter) GetEdgeConnects(name interface{}) *Client_GetEdgeConnects_Call {
	return &Client_GetEdgeConnects_Call{Call: _e.mock.On("GetEdgeConnects", name)}
}

func (_c *Client_GetEdgeConnects_Call) Run(run func(name string)) *Client_GetEdgeConnects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_GetEdgeConnects_Call) Return(listResponse edgeconnect.ListResponse, err error) *Client_GetEdgeConnects_Call {
	_c.Call.Return(listResponse, err)
	return _c
}

func (_c *Client_GetEdgeConnects_Call) RunAndReturn(run func(name string) (edgeconnect.ListResponse, error)) *Client_GetEdgeConnects_Call {
	_c.Call.Return(run)
	return _c
}

// GetScopes provides a mock function for the type Client
func (_mock *Client) GetScopes() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScopes")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// Client_GetScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopes'
type Client_GetScopes_Call struct {
	*mock.Call
}

// GetScopes is a helper method to define mock.On call
func (_e *Client_Expecter) GetScopes() *Client_GetScopes_Call {
	return &Client_GetScopes_Call{Call: _e.mock.On("GetScopes")}
}

func (_c *Client_GetScopes_Call) Run(run func()) *Client_GetScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetScopes_Call) Return(strings []string) *Client_GetScopes_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *Client_GetScopes_Call) RunAndReturn(run func() []string) *Client_GetScopes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnectionSetting provides a mock function for the type Client
func (_mock *Client) UpdateConnectionSetting(es edgeconnect.EnvironmentSetting) error {
	ret := _mock.Called(es)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectionSetting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(edgeconnect.EnvironmentSetting) error); ok {
		r0 = returnFunc(es)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_UpdateConnectionSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnectionSetting'
type Client_UpdateConnectionSetting_Call struct {
	*mock.Call
}

// UpdateConnectionSetting is a helper method to define mock.On call
//   - es edgeconnect.EnvironmentSetting
func (_e *Client_Expecter) UpdateConnectionSetting(es interface{}) *Client_UpdateConnectionSetting_Call {
	return &Client_UpdateConnectionSetting_Call{Call: _e.mock.On("UpdateConnectionSetting", es)}
}

func (_c *Client_UpdateConnectionSetting_Call) Run(run func(es edgeconnect.EnvironmentSetting)) *Client_UpdateConnectionSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 edgeconnect.EnvironmentSetting
		if args[0] != nil {
			arg0 = args[0].(edgeconnect.EnvironmentSetting)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_UpdateConnectionSetting_Call) Return(err error) *Client_UpdateConnectionSetting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_UpdateConnectionSetting_Call) RunAndReturn(run func(es edgeconnect.EnvironmentSetting) error) *Client_UpdateConnectionSetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEdgeConnect provides a mock function for the type Client
func (_mock *Client) UpdateEdgeConnect(edgeConnectID string, request *edgeconnect.Request) error {
	ret := _mock.Called(edgeConnectID, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEdgeConnect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, *edgeconnect.Request) error); ok {
		r0 = returnFunc(edgeConnectID, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_UpdateEdgeConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEdgeConnect'
type Client_UpdateEdgeConnect_Call struct {
	*mock.Call
}

// UpdateEdgeConnect is a helper method to define mock.On call
//   - edgeConnectID string
//   - request *edgeconnect.Request
func (_e *Client_Expecter) UpdateEdgeConnect(edgeConnectID interface{}, request interface{}) *Client_UpdateEdgeConnect_Call {
	return &Client_UpdateEdgeConnect_Call{Call: _e.mock.On("UpdateEdgeConnect", edgeConnectID, request)}
}

func (_c *Client_UpdateEdgeConnect_Call) Run(run func(edgeConnectID string, request *edgeconnect.Request)) *Client_UpdateEdgeConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *edgeconnect.Request
		if args[1] != nil {
			arg1 = args[1].(*edgeconnect.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_UpdateEdgeConnect_Call) Return(err error) *Client_UpdateEdgeConnect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_UpdateEdgeConnect_Call) RunAndReturn(run func(edgeConnectID string, request *edgeconnect.Request) error) *Client_UpdateEdgeConnect_Call {
	_c.Call.Return(run)
	return _c
}
