// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Dynatrace/dynatrace-operator/pkg/clients/dynatrace4/token"
	mock "github.com/stretchr/testify/mock"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// GetTokenScopes provides a mock function for the type Client
func (_mock *Client) GetTokenScopes(ctx context.Context, token1 string) (token.TokenScopes, error) {
	ret := _mock.Called(ctx, token1)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenScopes")
	}

	var r0 token.TokenScopes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (token.TokenScopes, error)); ok {
		return returnFunc(ctx, token1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) token.TokenScopes); ok {
		r0 = returnFunc(ctx, token1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(token.TokenScopes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetTokenScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenScopes'
type Client_GetTokenScopes_Call struct {
	*mock.Call
}

// GetTokenScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - token1 string
func (_e *Client_Expecter) GetTokenScopes(ctx interface{}, token1 interface{}) *Client_GetTokenScopes_Call {
	return &Client_GetTokenScopes_Call{Call: _e.mock.On("GetTokenScopes", ctx, token1)}
}

func (_c *Client_GetTokenScopes_Call) Run(run func(ctx context.Context, token1 string)) *Client_GetTokenScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetTokenScopes_Call) Return(tokenScopes token.TokenScopes, err error) *Client_GetTokenScopes_Call {
	_c.Call.Return(tokenScopes, err)
	return _c
}

func (_c *Client_GetTokenScopes_Call) RunAndReturn(run func(ctx context.Context, token1 string) (token.TokenScopes, error)) *Client_GetTokenScopes_Call {
	_c.Call.Return(run)
	return _c
}
