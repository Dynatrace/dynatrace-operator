// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Dynatrace/dynatrace-operator/pkg/api/latest/dynakube/logmonitoring"
	"github.com/Dynatrace/dynatrace-operator/pkg/clients/dynatrace4/settings"
	mock "github.com/stretchr/testify/mock"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateLogMonitoringSetting provides a mock function for the type Client
func (_mock *Client) CreateLogMonitoringSetting(ctx context.Context, scope string, clusterName string, matchers []logmonitoring.IngestRuleMatchers) (string, error) {
	ret := _mock.Called(ctx, scope, clusterName, matchers)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogMonitoringSetting")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []logmonitoring.IngestRuleMatchers) (string, error)); ok {
		return returnFunc(ctx, scope, clusterName, matchers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []logmonitoring.IngestRuleMatchers) string); ok {
		r0 = returnFunc(ctx, scope, clusterName, matchers)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, []logmonitoring.IngestRuleMatchers) error); ok {
		r1 = returnFunc(ctx, scope, clusterName, matchers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CreateLogMonitoringSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogMonitoringSetting'
type Client_CreateLogMonitoringSetting_Call struct {
	*mock.Call
}

// CreateLogMonitoringSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - scope string
//   - clusterName string
//   - matchers []logmonitoring.IngestRuleMatchers
func (_e *Client_Expecter) CreateLogMonitoringSetting(ctx interface{}, scope interface{}, clusterName interface{}, matchers interface{}) *Client_CreateLogMonitoringSetting_Call {
	return &Client_CreateLogMonitoringSetting_Call{Call: _e.mock.On("CreateLogMonitoringSetting", ctx, scope, clusterName, matchers)}
}

func (_c *Client_CreateLogMonitoringSetting_Call) Run(run func(ctx context.Context, scope string, clusterName string, matchers []logmonitoring.IngestRuleMatchers)) *Client_CreateLogMonitoringSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []logmonitoring.IngestRuleMatchers
		if args[3] != nil {
			arg3 = args[3].([]logmonitoring.IngestRuleMatchers)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Client_CreateLogMonitoringSetting_Call) Return(s string, err error) *Client_CreateLogMonitoringSetting_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Client_CreateLogMonitoringSetting_Call) RunAndReturn(run func(ctx context.Context, scope string, clusterName string, matchers []logmonitoring.IngestRuleMatchers) (string, error)) *Client_CreateLogMonitoringSetting_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateKubernetesAppSetting provides a mock function for the type Client
func (_mock *Client) CreateOrUpdateKubernetesAppSetting(ctx context.Context, scope string) (string, error) {
	ret := _mock.Called(ctx, scope)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateKubernetesAppSetting")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, scope)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, scope)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, scope)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CreateOrUpdateKubernetesAppSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateKubernetesAppSetting'
type Client_CreateOrUpdateKubernetesAppSetting_Call struct {
	*mock.Call
}

// CreateOrUpdateKubernetesAppSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - scope string
func (_e *Client_Expecter) CreateOrUpdateKubernetesAppSetting(ctx interface{}, scope interface{}) *Client_CreateOrUpdateKubernetesAppSetting_Call {
	return &Client_CreateOrUpdateKubernetesAppSetting_Call{Call: _e.mock.On("CreateOrUpdateKubernetesAppSetting", ctx, scope)}
}

func (_c *Client_CreateOrUpdateKubernetesAppSetting_Call) Run(run func(ctx context.Context, scope string)) *Client_CreateOrUpdateKubernetesAppSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_CreateOrUpdateKubernetesAppSetting_Call) Return(s string, err error) *Client_CreateOrUpdateKubernetesAppSetting_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Client_CreateOrUpdateKubernetesAppSetting_Call) RunAndReturn(run func(ctx context.Context, scope string) (string, error)) *Client_CreateOrUpdateKubernetesAppSetting_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateKubernetesSetting provides a mock function for the type Client
func (_mock *Client) CreateOrUpdateKubernetesSetting(ctx context.Context, clusterLabel string, kubeSystemUUID string, scope string) (string, error) {
	ret := _mock.Called(ctx, clusterLabel, kubeSystemUUID, scope)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateKubernetesSetting")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return returnFunc(ctx, clusterLabel, kubeSystemUUID, scope)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = returnFunc(ctx, clusterLabel, kubeSystemUUID, scope)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, clusterLabel, kubeSystemUUID, scope)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CreateOrUpdateKubernetesSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateKubernetesSetting'
type Client_CreateOrUpdateKubernetesSetting_Call struct {
	*mock.Call
}

// CreateOrUpdateKubernetesSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterLabel string
//   - kubeSystemUUID string
//   - scope string
func (_e *Client_Expecter) CreateOrUpdateKubernetesSetting(ctx interface{}, clusterLabel interface{}, kubeSystemUUID interface{}, scope interface{}) *Client_CreateOrUpdateKubernetesSetting_Call {
	return &Client_CreateOrUpdateKubernetesSetting_Call{Call: _e.mock.On("CreateOrUpdateKubernetesSetting", ctx, clusterLabel, kubeSystemUUID, scope)}
}

func (_c *Client_CreateOrUpdateKubernetesSetting_Call) Run(run func(ctx context.Context, clusterLabel string, kubeSystemUUID string, scope string)) *Client_CreateOrUpdateKubernetesSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Client_CreateOrUpdateKubernetesSetting_Call) Return(s string, err error) *Client_CreateOrUpdateKubernetesSetting_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Client_CreateOrUpdateKubernetesSetting_Call) RunAndReturn(run func(ctx context.Context, clusterLabel string, kubeSystemUUID string, scope string) (string, error)) *Client_CreateOrUpdateKubernetesSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetK8sClusterME provides a mock function for the type Client
func (_mock *Client) GetK8sClusterME(ctx context.Context, kubeSystemUUID string) (settings.K8sClusterME, error) {
	ret := _mock.Called(ctx, kubeSystemUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetK8sClusterME")
	}

	var r0 settings.K8sClusterME
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (settings.K8sClusterME, error)); ok {
		return returnFunc(ctx, kubeSystemUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) settings.K8sClusterME); ok {
		r0 = returnFunc(ctx, kubeSystemUUID)
	} else {
		r0 = ret.Get(0).(settings.K8sClusterME)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, kubeSystemUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetK8sClusterME_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetK8sClusterME'
type Client_GetK8sClusterME_Call struct {
	*mock.Call
}

// GetK8sClusterME is a helper method to define mock.On call
//   - ctx context.Context
//   - kubeSystemUUID string
func (_e *Client_Expecter) GetK8sClusterME(ctx interface{}, kubeSystemUUID interface{}) *Client_GetK8sClusterME_Call {
	return &Client_GetK8sClusterME_Call{Call: _e.mock.On("GetK8sClusterME", ctx, kubeSystemUUID)}
}

func (_c *Client_GetK8sClusterME_Call) Run(run func(ctx context.Context, kubeSystemUUID string)) *Client_GetK8sClusterME_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetK8sClusterME_Call) Return(k8sClusterME settings.K8sClusterME, err error) *Client_GetK8sClusterME_Call {
	_c.Call.Return(k8sClusterME, err)
	return _c
}

func (_c *Client_GetK8sClusterME_Call) RunAndReturn(run func(ctx context.Context, kubeSystemUUID string) (settings.K8sClusterME, error)) *Client_GetK8sClusterME_Call {
	_c.Call.Return(run)
	return _c
}

// GetK8sClusterMEDeleteThisMethod provides a mock function for the type Client
func (_mock *Client) GetK8sClusterMEDeleteThisMethod(ctx context.Context, kubeSystemUUID string) (settings.K8sClusterME, error) {
	ret := _mock.Called(ctx, kubeSystemUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetK8sClusterMEDeleteThisMethod")
	}

	var r0 settings.K8sClusterME
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (settings.K8sClusterME, error)); ok {
		return returnFunc(ctx, kubeSystemUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) settings.K8sClusterME); ok {
		r0 = returnFunc(ctx, kubeSystemUUID)
	} else {
		r0 = ret.Get(0).(settings.K8sClusterME)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, kubeSystemUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetK8sClusterMEDeleteThisMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetK8sClusterMEDeleteThisMethod'
type Client_GetK8sClusterMEDeleteThisMethod_Call struct {
	*mock.Call
}

// GetK8sClusterMEDeleteThisMethod is a helper method to define mock.On call
//   - ctx context.Context
//   - kubeSystemUUID string
func (_e *Client_Expecter) GetK8sClusterMEDeleteThisMethod(ctx interface{}, kubeSystemUUID interface{}) *Client_GetK8sClusterMEDeleteThisMethod_Call {
	return &Client_GetK8sClusterMEDeleteThisMethod_Call{Call: _e.mock.On("GetK8sClusterMEDeleteThisMethod", ctx, kubeSystemUUID)}
}

func (_c *Client_GetK8sClusterMEDeleteThisMethod_Call) Run(run func(ctx context.Context, kubeSystemUUID string)) *Client_GetK8sClusterMEDeleteThisMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetK8sClusterMEDeleteThisMethod_Call) Return(k8sClusterME settings.K8sClusterME, err error) *Client_GetK8sClusterMEDeleteThisMethod_Call {
	_c.Call.Return(k8sClusterME, err)
	return _c
}

func (_c *Client_GetK8sClusterMEDeleteThisMethod_Call) RunAndReturn(run func(ctx context.Context, kubeSystemUUID string) (settings.K8sClusterME, error)) *Client_GetK8sClusterMEDeleteThisMethod_Call {
	_c.Call.Return(run)
	return _c
}

// GetRulesSettings provides a mock function for the type Client
func (_mock *Client) GetRulesSettings(ctx context.Context, kubeSystemUUID string, entityID string) (settings.GetRulesSettingsResponse, error) {
	ret := _mock.Called(ctx, kubeSystemUUID, entityID)

	if len(ret) == 0 {
		panic("no return value specified for GetRulesSettings")
	}

	var r0 settings.GetRulesSettingsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (settings.GetRulesSettingsResponse, error)); ok {
		return returnFunc(ctx, kubeSystemUUID, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) settings.GetRulesSettingsResponse); ok {
		r0 = returnFunc(ctx, kubeSystemUUID, entityID)
	} else {
		r0 = ret.Get(0).(settings.GetRulesSettingsResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, kubeSystemUUID, entityID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetRulesSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRulesSettings'
type Client_GetRulesSettings_Call struct {
	*mock.Call
}

// GetRulesSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - kubeSystemUUID string
//   - entityID string
func (_e *Client_Expecter) GetRulesSettings(ctx interface{}, kubeSystemUUID interface{}, entityID interface{}) *Client_GetRulesSettings_Call {
	return &Client_GetRulesSettings_Call{Call: _e.mock.On("GetRulesSettings", ctx, kubeSystemUUID, entityID)}
}

func (_c *Client_GetRulesSettings_Call) Run(run func(ctx context.Context, kubeSystemUUID string, entityID string)) *Client_GetRulesSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_GetRulesSettings_Call) Return(getRulesSettingsResponse settings.GetRulesSettingsResponse, err error) *Client_GetRulesSettings_Call {
	_c.Call.Return(getRulesSettingsResponse, err)
	return _c
}

func (_c *Client_GetRulesSettings_Call) RunAndReturn(run func(ctx context.Context, kubeSystemUUID string, entityID string) (settings.GetRulesSettingsResponse, error)) *Client_GetRulesSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettingsForLogModule provides a mock function for the type Client
func (_mock *Client) GetSettingsForLogModule(ctx context.Context, monitoredEntity string) (settings.GetLogMonSettingsResponse, error) {
	ret := _mock.Called(ctx, monitoredEntity)

	if len(ret) == 0 {
		panic("no return value specified for GetSettingsForLogModule")
	}

	var r0 settings.GetLogMonSettingsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (settings.GetLogMonSettingsResponse, error)); ok {
		return returnFunc(ctx, monitoredEntity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) settings.GetLogMonSettingsResponse); ok {
		r0 = returnFunc(ctx, monitoredEntity)
	} else {
		r0 = ret.Get(0).(settings.GetLogMonSettingsResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, monitoredEntity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetSettingsForLogModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettingsForLogModule'
type Client_GetSettingsForLogModule_Call struct {
	*mock.Call
}

// GetSettingsForLogModule is a helper method to define mock.On call
//   - ctx context.Context
//   - monitoredEntity string
func (_e *Client_Expecter) GetSettingsForLogModule(ctx interface{}, monitoredEntity interface{}) *Client_GetSettingsForLogModule_Call {
	return &Client_GetSettingsForLogModule_Call{Call: _e.mock.On("GetSettingsForLogModule", ctx, monitoredEntity)}
}

func (_c *Client_GetSettingsForLogModule_Call) Run(run func(ctx context.Context, monitoredEntity string)) *Client_GetSettingsForLogModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetSettingsForLogModule_Call) Return(getLogMonSettingsResponse settings.GetLogMonSettingsResponse, err error) *Client_GetSettingsForLogModule_Call {
	_c.Call.Return(getLogMonSettingsResponse, err)
	return _c
}

func (_c *Client_GetSettingsForLogModule_Call) RunAndReturn(run func(ctx context.Context, monitoredEntity string) (settings.GetLogMonSettingsResponse, error)) *Client_GetSettingsForLogModule_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettingsForMonitoredEntity provides a mock function for the type Client
func (_mock *Client) GetSettingsForMonitoredEntity(ctx context.Context, monitoredEntity settings.K8sClusterME, schemaID string) (settings.GetSettingsResponse, error) {
	ret := _mock.Called(ctx, monitoredEntity, schemaID)

	if len(ret) == 0 {
		panic("no return value specified for GetSettingsForMonitoredEntity")
	}

	var r0 settings.GetSettingsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, settings.K8sClusterME, string) (settings.GetSettingsResponse, error)); ok {
		return returnFunc(ctx, monitoredEntity, schemaID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, settings.K8sClusterME, string) settings.GetSettingsResponse); ok {
		r0 = returnFunc(ctx, monitoredEntity, schemaID)
	} else {
		r0 = ret.Get(0).(settings.GetSettingsResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, settings.K8sClusterME, string) error); ok {
		r1 = returnFunc(ctx, monitoredEntity, schemaID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetSettingsForMonitoredEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettingsForMonitoredEntity'
type Client_GetSettingsForMonitoredEntity_Call struct {
	*mock.Call
}

// GetSettingsForMonitoredEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - monitoredEntity settings.K8sClusterME
//   - schemaID string
func (_e *Client_Expecter) GetSettingsForMonitoredEntity(ctx interface{}, monitoredEntity interface{}, schemaID interface{}) *Client_GetSettingsForMonitoredEntity_Call {
	return &Client_GetSettingsForMonitoredEntity_Call{Call: _e.mock.On("GetSettingsForMonitoredEntity", ctx, monitoredEntity, schemaID)}
}

func (_c *Client_GetSettingsForMonitoredEntity_Call) Run(run func(ctx context.Context, monitoredEntity settings.K8sClusterME, schemaID string)) *Client_GetSettingsForMonitoredEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 settings.K8sClusterME
		if args[1] != nil {
			arg1 = args[1].(settings.K8sClusterME)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_GetSettingsForMonitoredEntity_Call) Return(getSettingsResponse settings.GetSettingsResponse, err error) *Client_GetSettingsForMonitoredEntity_Call {
	_c.Call.Return(getSettingsResponse, err)
	return _c
}

func (_c *Client_GetSettingsForMonitoredEntity_Call) RunAndReturn(run func(ctx context.Context, monitoredEntity settings.K8sClusterME, schemaID string) (settings.GetSettingsResponse, error)) *Client_GetSettingsForMonitoredEntity_Call {
	_c.Call.Return(run)
	return _c
}
