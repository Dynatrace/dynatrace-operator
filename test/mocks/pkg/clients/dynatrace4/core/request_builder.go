// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/Dynatrace/dynatrace-operator/pkg/clients/dynatrace4/core"
	mock "github.com/stretchr/testify/mock"
)

// NewRequestBuilder creates a new instance of RequestBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestBuilder {
	mock := &RequestBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RequestBuilder is an autogenerated mock type for the RequestBuilder type
type RequestBuilder struct {
	mock.Mock
}

type RequestBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestBuilder) EXPECT() *RequestBuilder_Expecter {
	return &RequestBuilder_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type RequestBuilder
func (_mock *RequestBuilder) Execute(target interface{}) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RequestBuilder_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type RequestBuilder_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - target interface{}
func (_e *RequestBuilder_Expecter) Execute(target interface{}) *RequestBuilder_Execute_Call {
	return &RequestBuilder_Execute_Call{Call: _e.mock.On("Execute", target)}
}

func (_c *RequestBuilder_Execute_Call) Run(run func(target interface{})) *RequestBuilder_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RequestBuilder_Execute_Call) Return(err error) *RequestBuilder_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RequestBuilder_Execute_Call) RunAndReturn(run func(target interface{}) error) *RequestBuilder_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteRaw provides a mock function for the type RequestBuilder
func (_mock *RequestBuilder) ExecuteRaw() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecuteRaw")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RequestBuilder_ExecuteRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteRaw'
type RequestBuilder_ExecuteRaw_Call struct {
	*mock.Call
}

// ExecuteRaw is a helper method to define mock.On call
func (_e *RequestBuilder_Expecter) ExecuteRaw() *RequestBuilder_ExecuteRaw_Call {
	return &RequestBuilder_ExecuteRaw_Call{Call: _e.mock.On("ExecuteRaw")}
}

func (_c *RequestBuilder_ExecuteRaw_Call) Run(run func()) *RequestBuilder_ExecuteRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RequestBuilder_ExecuteRaw_Call) Return(bytes []byte, err error) *RequestBuilder_ExecuteRaw_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *RequestBuilder_ExecuteRaw_Call) RunAndReturn(run func() ([]byte, error)) *RequestBuilder_ExecuteRaw_Call {
	_c.Call.Return(run)
	return _c
}

// WithJSONBody provides a mock function for the type RequestBuilder
func (_mock *RequestBuilder) WithJSONBody(body interface{}) core.RequestBuilder {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for WithJSONBody")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(interface{}) core.RequestBuilder); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// RequestBuilder_WithJSONBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithJSONBody'
type RequestBuilder_WithJSONBody_Call struct {
	*mock.Call
}

// WithJSONBody is a helper method to define mock.On call
//   - body interface{}
func (_e *RequestBuilder_Expecter) WithJSONBody(body interface{}) *RequestBuilder_WithJSONBody_Call {
	return &RequestBuilder_WithJSONBody_Call{Call: _e.mock.On("WithJSONBody", body)}
}

func (_c *RequestBuilder_WithJSONBody_Call) Run(run func(body interface{})) *RequestBuilder_WithJSONBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RequestBuilder_WithJSONBody_Call) Return(requestBuilder core.RequestBuilder) *RequestBuilder_WithJSONBody_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *RequestBuilder_WithJSONBody_Call) RunAndReturn(run func(body interface{}) core.RequestBuilder) *RequestBuilder_WithJSONBody_Call {
	_c.Call.Return(run)
	return _c
}

// WithPaasToken provides a mock function for the type RequestBuilder
func (_mock *RequestBuilder) WithPaasToken() core.RequestBuilder {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithPaasToken")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func() core.RequestBuilder); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// RequestBuilder_WithPaasToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPaasToken'
type RequestBuilder_WithPaasToken_Call struct {
	*mock.Call
}

// WithPaasToken is a helper method to define mock.On call
func (_e *RequestBuilder_Expecter) WithPaasToken() *RequestBuilder_WithPaasToken_Call {
	return &RequestBuilder_WithPaasToken_Call{Call: _e.mock.On("WithPaasToken")}
}

func (_c *RequestBuilder_WithPaasToken_Call) Run(run func()) *RequestBuilder_WithPaasToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RequestBuilder_WithPaasToken_Call) Return(requestBuilder core.RequestBuilder) *RequestBuilder_WithPaasToken_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *RequestBuilder_WithPaasToken_Call) RunAndReturn(run func() core.RequestBuilder) *RequestBuilder_WithPaasToken_Call {
	_c.Call.Return(run)
	return _c
}

// WithPath provides a mock function for the type RequestBuilder
func (_mock *RequestBuilder) WithPath(path string) core.RequestBuilder {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for WithPath")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(string) core.RequestBuilder); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// RequestBuilder_WithPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPath'
type RequestBuilder_WithPath_Call struct {
	*mock.Call
}

// WithPath is a helper method to define mock.On call
//   - path string
func (_e *RequestBuilder_Expecter) WithPath(path interface{}) *RequestBuilder_WithPath_Call {
	return &RequestBuilder_WithPath_Call{Call: _e.mock.On("WithPath", path)}
}

func (_c *RequestBuilder_WithPath_Call) Run(run func(path string)) *RequestBuilder_WithPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RequestBuilder_WithPath_Call) Return(requestBuilder core.RequestBuilder) *RequestBuilder_WithPath_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *RequestBuilder_WithPath_Call) RunAndReturn(run func(path string) core.RequestBuilder) *RequestBuilder_WithPath_Call {
	_c.Call.Return(run)
	return _c
}

// WithQueryParams provides a mock function for the type RequestBuilder
func (_mock *RequestBuilder) WithQueryParams(params map[string]string) core.RequestBuilder {
	ret := _mock.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for WithQueryParams")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(map[string]string) core.RequestBuilder); ok {
		r0 = returnFunc(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// RequestBuilder_WithQueryParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQueryParams'
type RequestBuilder_WithQueryParams_Call struct {
	*mock.Call
}

// WithQueryParams is a helper method to define mock.On call
//   - params map[string]string
func (_e *RequestBuilder_Expecter) WithQueryParams(params interface{}) *RequestBuilder_WithQueryParams_Call {
	return &RequestBuilder_WithQueryParams_Call{Call: _e.mock.On("WithQueryParams", params)}
}

func (_c *RequestBuilder_WithQueryParams_Call) Run(run func(params map[string]string)) *RequestBuilder_WithQueryParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]string
		if args[0] != nil {
			arg0 = args[0].(map[string]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RequestBuilder_WithQueryParams_Call) Return(requestBuilder core.RequestBuilder) *RequestBuilder_WithQueryParams_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *RequestBuilder_WithQueryParams_Call) RunAndReturn(run func(params map[string]string) core.RequestBuilder) *RequestBuilder_WithQueryParams_Call {
	_c.Call.Return(run)
	return _c
}

// WithRawBody provides a mock function for the type RequestBuilder
func (_mock *RequestBuilder) WithRawBody(body []byte) core.RequestBuilder {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for WithRawBody")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func([]byte) core.RequestBuilder); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// RequestBuilder_WithRawBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithRawBody'
type RequestBuilder_WithRawBody_Call struct {
	*mock.Call
}

// WithRawBody is a helper method to define mock.On call
//   - body []byte
func (_e *RequestBuilder_Expecter) WithRawBody(body interface{}) *RequestBuilder_WithRawBody_Call {
	return &RequestBuilder_WithRawBody_Call{Call: _e.mock.On("WithRawBody", body)}
}

func (_c *RequestBuilder_WithRawBody_Call) Run(run func(body []byte)) *RequestBuilder_WithRawBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RequestBuilder_WithRawBody_Call) Return(requestBuilder core.RequestBuilder) *RequestBuilder_WithRawBody_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *RequestBuilder_WithRawBody_Call) RunAndReturn(run func(body []byte) core.RequestBuilder) *RequestBuilder_WithRawBody_Call {
	_c.Call.Return(run)
	return _c
}

// WithTokenType provides a mock function for the type RequestBuilder
func (_mock *RequestBuilder) WithTokenType(tokenType core.TokenType) core.RequestBuilder {
	ret := _mock.Called(tokenType)

	if len(ret) == 0 {
		panic("no return value specified for WithTokenType")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(core.TokenType) core.RequestBuilder); ok {
		r0 = returnFunc(tokenType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// RequestBuilder_WithTokenType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTokenType'
type RequestBuilder_WithTokenType_Call struct {
	*mock.Call
}

// WithTokenType is a helper method to define mock.On call
//   - tokenType core.TokenType
func (_e *RequestBuilder_Expecter) WithTokenType(tokenType interface{}) *RequestBuilder_WithTokenType_Call {
	return &RequestBuilder_WithTokenType_Call{Call: _e.mock.On("WithTokenType", tokenType)}
}

func (_c *RequestBuilder_WithTokenType_Call) Run(run func(tokenType core.TokenType)) *RequestBuilder_WithTokenType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.TokenType
		if args[0] != nil {
			arg0 = args[0].(core.TokenType)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RequestBuilder_WithTokenType_Call) Return(requestBuilder core.RequestBuilder) *RequestBuilder_WithTokenType_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *RequestBuilder_WithTokenType_Call) RunAndReturn(run func(tokenType core.TokenType) core.RequestBuilder) *RequestBuilder_WithTokenType_Call {
	_c.Call.Return(run)
	return _c
}
