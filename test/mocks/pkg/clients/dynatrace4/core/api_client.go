// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/Dynatrace/dynatrace-operator/pkg/clients/dynatrace4/core"
	mock "github.com/stretchr/testify/mock"
)

// NewApiClient creates a new instance of ApiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApiClient {
	mock := &ApiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ApiClient is an autogenerated mock type for the ApiClient type
type ApiClient struct {
	mock.Mock
}

type ApiClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ApiClient) EXPECT() *ApiClient_Expecter {
	return &ApiClient_Expecter{mock: &_m.Mock}
}

// DELETE provides a mock function for the type ApiClient
func (_mock *ApiClient) DELETE(path string) core.RequestBuilder {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for DELETE")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(string) core.RequestBuilder); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// ApiClient_DELETE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DELETE'
type ApiClient_DELETE_Call struct {
	*mock.Call
}

// DELETE is a helper method to define mock.On call
//   - path string
func (_e *ApiClient_Expecter) DELETE(path interface{}) *ApiClient_DELETE_Call {
	return &ApiClient_DELETE_Call{Call: _e.mock.On("DELETE", path)}
}

func (_c *ApiClient_DELETE_Call) Run(run func(path string)) *ApiClient_DELETE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApiClient_DELETE_Call) Return(requestBuilder core.RequestBuilder) *ApiClient_DELETE_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *ApiClient_DELETE_Call) RunAndReturn(run func(path string) core.RequestBuilder) *ApiClient_DELETE_Call {
	_c.Call.Return(run)
	return _c
}

// GET provides a mock function for the type ApiClient
func (_mock *ApiClient) GET(path string) core.RequestBuilder {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GET")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(string) core.RequestBuilder); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// ApiClient_GET_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GET'
type ApiClient_GET_Call struct {
	*mock.Call
}

// GET is a helper method to define mock.On call
//   - path string
func (_e *ApiClient_Expecter) GET(path interface{}) *ApiClient_GET_Call {
	return &ApiClient_GET_Call{Call: _e.mock.On("GET", path)}
}

func (_c *ApiClient_GET_Call) Run(run func(path string)) *ApiClient_GET_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApiClient_GET_Call) Return(requestBuilder core.RequestBuilder) *ApiClient_GET_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *ApiClient_GET_Call) RunAndReturn(run func(path string) core.RequestBuilder) *ApiClient_GET_Call {
	_c.Call.Return(run)
	return _c
}

// POST provides a mock function for the type ApiClient
func (_mock *ApiClient) POST(path string) core.RequestBuilder {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for POST")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(string) core.RequestBuilder); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// ApiClient_POST_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'POST'
type ApiClient_POST_Call struct {
	*mock.Call
}

// POST is a helper method to define mock.On call
//   - path string
func (_e *ApiClient_Expecter) POST(path interface{}) *ApiClient_POST_Call {
	return &ApiClient_POST_Call{Call: _e.mock.On("POST", path)}
}

func (_c *ApiClient_POST_Call) Run(run func(path string)) *ApiClient_POST_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApiClient_POST_Call) Return(requestBuilder core.RequestBuilder) *ApiClient_POST_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *ApiClient_POST_Call) RunAndReturn(run func(path string) core.RequestBuilder) *ApiClient_POST_Call {
	_c.Call.Return(run)
	return _c
}

// PUT provides a mock function for the type ApiClient
func (_mock *ApiClient) PUT(path string) core.RequestBuilder {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for PUT")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(string) core.RequestBuilder); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// ApiClient_PUT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PUT'
type ApiClient_PUT_Call struct {
	*mock.Call
}

// PUT is a helper method to define mock.On call
//   - path string
func (_e *ApiClient_Expecter) PUT(path interface{}) *ApiClient_PUT_Call {
	return &ApiClient_PUT_Call{Call: _e.mock.On("PUT", path)}
}

func (_c *ApiClient_PUT_Call) Run(run func(path string)) *ApiClient_PUT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApiClient_PUT_Call) Return(requestBuilder core.RequestBuilder) *ApiClient_PUT_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *ApiClient_PUT_Call) RunAndReturn(run func(path string) core.RequestBuilder) *ApiClient_PUT_Call {
	_c.Call.Return(run)
	return _c
}
