// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Dynatrace/dynatrace-operator/pkg/clients/dynatrace4/core"
	mock "github.com/stretchr/testify/mock"
)

// NewAPIClient creates a new instance of APIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIClient {
	mock := &APIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// APIClient is an autogenerated mock type for the APIClient type
type APIClient struct {
	mock.Mock
}

type APIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *APIClient) EXPECT() *APIClient_Expecter {
	return &APIClient_Expecter{mock: &_m.Mock}
}

// DELETE provides a mock function for the type APIClient
func (_mock *APIClient) DELETE(ctx context.Context, path string) core.RequestBuilder {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for DELETE")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) core.RequestBuilder); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// APIClient_DELETE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DELETE'
type APIClient_DELETE_Call struct {
	*mock.Call
}

// DELETE is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *APIClient_Expecter) DELETE(ctx interface{}, path interface{}) *APIClient_DELETE_Call {
	return &APIClient_DELETE_Call{Call: _e.mock.On("DELETE", ctx, path)}
}

func (_c *APIClient_DELETE_Call) Run(run func(ctx context.Context, path string)) *APIClient_DELETE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *APIClient_DELETE_Call) Return(requestBuilder core.RequestBuilder) *APIClient_DELETE_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *APIClient_DELETE_Call) RunAndReturn(run func(ctx context.Context, path string) core.RequestBuilder) *APIClient_DELETE_Call {
	_c.Call.Return(run)
	return _c
}

// GET provides a mock function for the type APIClient
func (_mock *APIClient) GET(ctx context.Context, path string) core.RequestBuilder {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GET")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) core.RequestBuilder); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// APIClient_GET_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GET'
type APIClient_GET_Call struct {
	*mock.Call
}

// GET is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *APIClient_Expecter) GET(ctx interface{}, path interface{}) *APIClient_GET_Call {
	return &APIClient_GET_Call{Call: _e.mock.On("GET", ctx, path)}
}

func (_c *APIClient_GET_Call) Run(run func(ctx context.Context, path string)) *APIClient_GET_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *APIClient_GET_Call) Return(requestBuilder core.RequestBuilder) *APIClient_GET_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *APIClient_GET_Call) RunAndReturn(run func(ctx context.Context, path string) core.RequestBuilder) *APIClient_GET_Call {
	_c.Call.Return(run)
	return _c
}

// POST provides a mock function for the type APIClient
func (_mock *APIClient) POST(ctx context.Context, path string) core.RequestBuilder {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for POST")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) core.RequestBuilder); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// APIClient_POST_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'POST'
type APIClient_POST_Call struct {
	*mock.Call
}

// POST is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *APIClient_Expecter) POST(ctx interface{}, path interface{}) *APIClient_POST_Call {
	return &APIClient_POST_Call{Call: _e.mock.On("POST", ctx, path)}
}

func (_c *APIClient_POST_Call) Run(run func(ctx context.Context, path string)) *APIClient_POST_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *APIClient_POST_Call) Return(requestBuilder core.RequestBuilder) *APIClient_POST_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *APIClient_POST_Call) RunAndReturn(run func(ctx context.Context, path string) core.RequestBuilder) *APIClient_POST_Call {
	_c.Call.Return(run)
	return _c
}

// PUT provides a mock function for the type APIClient
func (_mock *APIClient) PUT(ctx context.Context, path string) core.RequestBuilder {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for PUT")
	}

	var r0 core.RequestBuilder
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) core.RequestBuilder); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.RequestBuilder)
		}
	}
	return r0
}

// APIClient_PUT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PUT'
type APIClient_PUT_Call struct {
	*mock.Call
}

// PUT is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *APIClient_Expecter) PUT(ctx interface{}, path interface{}) *APIClient_PUT_Call {
	return &APIClient_PUT_Call{Call: _e.mock.On("PUT", ctx, path)}
}

func (_c *APIClient_PUT_Call) Run(run func(ctx context.Context, path string)) *APIClient_PUT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *APIClient_PUT_Call) Return(requestBuilder core.RequestBuilder) *APIClient_PUT_Call {
	_c.Call.Return(requestBuilder)
	return _c
}

func (_c *APIClient_PUT_Call) RunAndReturn(run func(ctx context.Context, path string) core.RequestBuilder) *APIClient_PUT_Call {
	_c.Call.Return(run)
	return _c
}
