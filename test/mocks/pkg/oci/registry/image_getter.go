// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Dynatrace/dynatrace-operator/pkg/oci/registry"
	"github.com/google/go-containerregistry/pkg/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewImageGetter creates a new instance of ImageGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageGetter {
	mock := &ImageGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ImageGetter is an autogenerated mock type for the ImageGetter type
type ImageGetter struct {
	mock.Mock
}

type ImageGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ImageGetter) EXPECT() *ImageGetter_Expecter {
	return &ImageGetter_Expecter{mock: &_m.Mock}
}

// GetImageVersion provides a mock function for the type ImageGetter
func (_mock *ImageGetter) GetImageVersion(ctx context.Context, imageName string) (registry.ImageVersion, error) {
	ret := _mock.Called(ctx, imageName)

	if len(ret) == 0 {
		panic("no return value specified for GetImageVersion")
	}

	var r0 registry.ImageVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (registry.ImageVersion, error)); ok {
		return returnFunc(ctx, imageName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) registry.ImageVersion); ok {
		r0 = returnFunc(ctx, imageName)
	} else {
		r0 = ret.Get(0).(registry.ImageVersion)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, imageName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ImageGetter_GetImageVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImageVersion'
type ImageGetter_GetImageVersion_Call struct {
	*mock.Call
}

// GetImageVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
func (_e *ImageGetter_Expecter) GetImageVersion(ctx interface{}, imageName interface{}) *ImageGetter_GetImageVersion_Call {
	return &ImageGetter_GetImageVersion_Call{Call: _e.mock.On("GetImageVersion", ctx, imageName)}
}

func (_c *ImageGetter_GetImageVersion_Call) Run(run func(ctx context.Context, imageName string)) *ImageGetter_GetImageVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ImageGetter_GetImageVersion_Call) Return(imageVersion registry.ImageVersion, err error) *ImageGetter_GetImageVersion_Call {
	_c.Call.Return(imageVersion, err)
	return _c
}

func (_c *ImageGetter_GetImageVersion_Call) RunAndReturn(run func(ctx context.Context, imageName string) (registry.ImageVersion, error)) *ImageGetter_GetImageVersion_Call {
	_c.Call.Return(run)
	return _c
}

// PullImageInfo provides a mock function for the type ImageGetter
func (_mock *ImageGetter) PullImageInfo(ctx context.Context, imageName string) (*v1.Image, error) {
	ret := _mock.Called(ctx, imageName)

	if len(ret) == 0 {
		panic("no return value specified for PullImageInfo")
	}

	var r0 *v1.Image
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*v1.Image, error)); ok {
		return returnFunc(ctx, imageName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *v1.Image); ok {
		r0 = returnFunc(ctx, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Image)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, imageName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ImageGetter_PullImageInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullImageInfo'
type ImageGetter_PullImageInfo_Call struct {
	*mock.Call
}

// PullImageInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
func (_e *ImageGetter_Expecter) PullImageInfo(ctx interface{}, imageName interface{}) *ImageGetter_PullImageInfo_Call {
	return &ImageGetter_PullImageInfo_Call{Call: _e.mock.On("PullImageInfo", ctx, imageName)}
}

func (_c *ImageGetter_PullImageInfo_Call) Run(run func(ctx context.Context, imageName string)) *ImageGetter_PullImageInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ImageGetter_PullImageInfo_Call) Return(image *v1.Image, err error) *ImageGetter_PullImageInfo_Call {
	_c.Call.Return(image, err)
	return _c
}

func (_c *ImageGetter_PullImageInfo_Call) RunAndReturn(run func(ctx context.Context, imageName string) (*v1.Image, error)) *ImageGetter_PullImageInfo_Call {
	_c.Call.Return(run)
	return _c
}
