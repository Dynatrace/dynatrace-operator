// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Dynatrace/dynatrace-operator/pkg/api/latest/dynakube"
	mock "github.com/stretchr/testify/mock"
)

// NewReconciler creates a new instance of Reconciler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReconciler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reconciler {
	mock := &Reconciler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Reconciler is an autogenerated mock type for the Reconciler type
type Reconciler struct {
	mock.Mock
}

type Reconciler_Expecter struct {
	mock *mock.Mock
}

func (_m *Reconciler) EXPECT() *Reconciler_Expecter {
	return &Reconciler_Expecter{mock: &_m.Mock}
}

// ReconcileActiveGate provides a mock function for the type Reconciler
func (_mock *Reconciler) ReconcileActiveGate(ctx context.Context, dk *dynakube.DynaKube) error {
	ret := _mock.Called(ctx, dk)

	if len(ret) == 0 {
		panic("no return value specified for ReconcileActiveGate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynakube.DynaKube) error); ok {
		r0 = returnFunc(ctx, dk)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Reconciler_ReconcileActiveGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReconcileActiveGate'
type Reconciler_ReconcileActiveGate_Call struct {
	*mock.Call
}

// ReconcileActiveGate is a helper method to define mock.On call
//   - ctx context.Context
//   - dk *dynakube.DynaKube
func (_e *Reconciler_Expecter) ReconcileActiveGate(ctx interface{}, dk interface{}) *Reconciler_ReconcileActiveGate_Call {
	return &Reconciler_ReconcileActiveGate_Call{Call: _e.mock.On("ReconcileActiveGate", ctx, dk)}
}

func (_c *Reconciler_ReconcileActiveGate_Call) Run(run func(ctx context.Context, dk *dynakube.DynaKube)) *Reconciler_ReconcileActiveGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynakube.DynaKube
		if args[1] != nil {
			arg1 = args[1].(*dynakube.DynaKube)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Reconciler_ReconcileActiveGate_Call) Return(err error) *Reconciler_ReconcileActiveGate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Reconciler_ReconcileActiveGate_Call) RunAndReturn(run func(ctx context.Context, dk *dynakube.DynaKube) error) *Reconciler_ReconcileActiveGate_Call {
	_c.Call.Return(run)
	return _c
}

// ReconcileCodeModules provides a mock function for the type Reconciler
func (_mock *Reconciler) ReconcileCodeModules(ctx context.Context, dk *dynakube.DynaKube) error {
	ret := _mock.Called(ctx, dk)

	if len(ret) == 0 {
		panic("no return value specified for ReconcileCodeModules")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynakube.DynaKube) error); ok {
		r0 = returnFunc(ctx, dk)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Reconciler_ReconcileCodeModules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReconcileCodeModules'
type Reconciler_ReconcileCodeModules_Call struct {
	*mock.Call
}

// ReconcileCodeModules is a helper method to define mock.On call
//   - ctx context.Context
//   - dk *dynakube.DynaKube
func (_e *Reconciler_Expecter) ReconcileCodeModules(ctx interface{}, dk interface{}) *Reconciler_ReconcileCodeModules_Call {
	return &Reconciler_ReconcileCodeModules_Call{Call: _e.mock.On("ReconcileCodeModules", ctx, dk)}
}

func (_c *Reconciler_ReconcileCodeModules_Call) Run(run func(ctx context.Context, dk *dynakube.DynaKube)) *Reconciler_ReconcileCodeModules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynakube.DynaKube
		if args[1] != nil {
			arg1 = args[1].(*dynakube.DynaKube)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Reconciler_ReconcileCodeModules_Call) Return(err error) *Reconciler_ReconcileCodeModules_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Reconciler_ReconcileCodeModules_Call) RunAndReturn(run func(ctx context.Context, dk *dynakube.DynaKube) error) *Reconciler_ReconcileCodeModules_Call {
	_c.Call.Return(run)
	return _c
}

// ReconcileOneAgent provides a mock function for the type Reconciler
func (_mock *Reconciler) ReconcileOneAgent(ctx context.Context, dk *dynakube.DynaKube) error {
	ret := _mock.Called(ctx, dk)

	if len(ret) == 0 {
		panic("no return value specified for ReconcileOneAgent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynakube.DynaKube) error); ok {
		r0 = returnFunc(ctx, dk)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Reconciler_ReconcileOneAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReconcileOneAgent'
type Reconciler_ReconcileOneAgent_Call struct {
	*mock.Call
}

// ReconcileOneAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - dk *dynakube.DynaKube
func (_e *Reconciler_Expecter) ReconcileOneAgent(ctx interface{}, dk interface{}) *Reconciler_ReconcileOneAgent_Call {
	return &Reconciler_ReconcileOneAgent_Call{Call: _e.mock.On("ReconcileOneAgent", ctx, dk)}
}

func (_c *Reconciler_ReconcileOneAgent_Call) Run(run func(ctx context.Context, dk *dynakube.DynaKube)) *Reconciler_ReconcileOneAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynakube.DynaKube
		if args[1] != nil {
			arg1 = args[1].(*dynakube.DynaKube)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Reconciler_ReconcileOneAgent_Call) Return(err error) *Reconciler_ReconcileOneAgent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Reconciler_ReconcileOneAgent_Call) RunAndReturn(run func(ctx context.Context, dk *dynakube.DynaKube) error) *Reconciler_ReconcileOneAgent_Call {
	_c.Call.Return(run)
	return _c
}
