// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Dynatrace/dynatrace-operator/pkg/api/latest/dynakube"
	"github.com/Dynatrace/dynatrace-operator/pkg/clients/dynatrace"
	"github.com/Dynatrace/dynatrace-operator/pkg/controllers/dynakube/dynatraceclient"
	"github.com/Dynatrace/dynatrace-operator/pkg/controllers/dynakube/token"
	mock "github.com/stretchr/testify/mock"
)

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

type Builder_Expecter struct {
	mock *mock.Mock
}

func (_m *Builder) EXPECT() *Builder_Expecter {
	return &Builder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function for the type Builder
func (_mock *Builder) Build() (dynatrace.Client, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 dynatrace.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (dynatrace.Client, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() dynatrace.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynatrace.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Builder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type Builder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *Builder_Expecter) Build() *Builder_Build_Call {
	return &Builder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *Builder_Build_Call) Run(run func()) *Builder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_Build_Call) Return(client dynatrace.Client, err error) *Builder_Build_Call {
	_c.Call.Return(client, err)
	return _c
}

func (_c *Builder_Build_Call) RunAndReturn(run func() (dynatrace.Client, error)) *Builder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// BuildWithTokenVerification provides a mock function for the type Builder
func (_mock *Builder) BuildWithTokenVerification(dkStatus *dynakube.DynaKubeStatus, optionalScopeMissing dynatraceclient.SetConditionOptionalScope, optionalScopeAvailable dynatraceclient.SetConditionOptionalScope) (dynatrace.Client, error) {
	ret := _mock.Called(dkStatus, optionalScopeMissing, optionalScopeAvailable)

	if len(ret) == 0 {
		panic("no return value specified for BuildWithTokenVerification")
	}

	var r0 dynatrace.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*dynakube.DynaKubeStatus, dynatraceclient.SetConditionOptionalScope, dynatraceclient.SetConditionOptionalScope) (dynatrace.Client, error)); ok {
		return returnFunc(dkStatus, optionalScopeMissing, optionalScopeAvailable)
	}
	if returnFunc, ok := ret.Get(0).(func(*dynakube.DynaKubeStatus, dynatraceclient.SetConditionOptionalScope, dynatraceclient.SetConditionOptionalScope) dynatrace.Client); ok {
		r0 = returnFunc(dkStatus, optionalScopeMissing, optionalScopeAvailable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynatrace.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*dynakube.DynaKubeStatus, dynatraceclient.SetConditionOptionalScope, dynatraceclient.SetConditionOptionalScope) error); ok {
		r1 = returnFunc(dkStatus, optionalScopeMissing, optionalScopeAvailable)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Builder_BuildWithTokenVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildWithTokenVerification'
type Builder_BuildWithTokenVerification_Call struct {
	*mock.Call
}

// BuildWithTokenVerification is a helper method to define mock.On call
//   - dkStatus *dynakube.DynaKubeStatus
//   - optionalScopeMissing dynatraceclient.SetConditionOptionalScope
//   - optionalScopeAvailable dynatraceclient.SetConditionOptionalScope
func (_e *Builder_Expecter) BuildWithTokenVerification(dkStatus interface{}, optionalScopeMissing interface{}, optionalScopeAvailable interface{}) *Builder_BuildWithTokenVerification_Call {
	return &Builder_BuildWithTokenVerification_Call{Call: _e.mock.On("BuildWithTokenVerification", dkStatus, optionalScopeMissing, optionalScopeAvailable)}
}

func (_c *Builder_BuildWithTokenVerification_Call) Run(run func(dkStatus *dynakube.DynaKubeStatus, optionalScopeMissing dynatraceclient.SetConditionOptionalScope, optionalScopeAvailable dynatraceclient.SetConditionOptionalScope)) *Builder_BuildWithTokenVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *dynakube.DynaKubeStatus
		if args[0] != nil {
			arg0 = args[0].(*dynakube.DynaKubeStatus)
		}
		var arg1 dynatraceclient.SetConditionOptionalScope
		if args[1] != nil {
			arg1 = args[1].(dynatraceclient.SetConditionOptionalScope)
		}
		var arg2 dynatraceclient.SetConditionOptionalScope
		if args[2] != nil {
			arg2 = args[2].(dynatraceclient.SetConditionOptionalScope)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Builder_BuildWithTokenVerification_Call) Return(client dynatrace.Client, err error) *Builder_BuildWithTokenVerification_Call {
	_c.Call.Return(client, err)
	return _c
}

func (_c *Builder_BuildWithTokenVerification_Call) RunAndReturn(run func(dkStatus *dynakube.DynaKubeStatus, optionalScopeMissing dynatraceclient.SetConditionOptionalScope, optionalScopeAvailable dynatraceclient.SetConditionOptionalScope) (dynatrace.Client, error)) *Builder_BuildWithTokenVerification_Call {
	_c.Call.Return(run)
	return _c
}

// SetContext provides a mock function for the type Builder
func (_mock *Builder) SetContext(ctx context.Context) dynatraceclient.Builder {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetContext")
	}

	var r0 dynatraceclient.Builder
	if returnFunc, ok := ret.Get(0).(func(context.Context) dynatraceclient.Builder); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynatraceclient.Builder)
		}
	}
	return r0
}

// Builder_SetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContext'
type Builder_SetContext_Call struct {
	*mock.Call
}

// SetContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Builder_Expecter) SetContext(ctx interface{}) *Builder_SetContext_Call {
	return &Builder_SetContext_Call{Call: _e.mock.On("SetContext", ctx)}
}

func (_c *Builder_SetContext_Call) Run(run func(ctx context.Context)) *Builder_SetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Builder_SetContext_Call) Return(builder dynatraceclient.Builder) *Builder_SetContext_Call {
	_c.Call.Return(builder)
	return _c
}

func (_c *Builder_SetContext_Call) RunAndReturn(run func(ctx context.Context) dynatraceclient.Builder) *Builder_SetContext_Call {
	_c.Call.Return(run)
	return _c
}

// SetDynakube provides a mock function for the type Builder
func (_mock *Builder) SetDynakube(dk dynakube.DynaKube) dynatraceclient.Builder {
	ret := _mock.Called(dk)

	if len(ret) == 0 {
		panic("no return value specified for SetDynakube")
	}

	var r0 dynatraceclient.Builder
	if returnFunc, ok := ret.Get(0).(func(dynakube.DynaKube) dynatraceclient.Builder); ok {
		r0 = returnFunc(dk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynatraceclient.Builder)
		}
	}
	return r0
}

// Builder_SetDynakube_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDynakube'
type Builder_SetDynakube_Call struct {
	*mock.Call
}

// SetDynakube is a helper method to define mock.On call
//   - dk dynakube.DynaKube
func (_e *Builder_Expecter) SetDynakube(dk interface{}) *Builder_SetDynakube_Call {
	return &Builder_SetDynakube_Call{Call: _e.mock.On("SetDynakube", dk)}
}

func (_c *Builder_SetDynakube_Call) Run(run func(dk dynakube.DynaKube)) *Builder_SetDynakube_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dynakube.DynaKube
		if args[0] != nil {
			arg0 = args[0].(dynakube.DynaKube)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Builder_SetDynakube_Call) Return(builder dynatraceclient.Builder) *Builder_SetDynakube_Call {
	_c.Call.Return(builder)
	return _c
}

func (_c *Builder_SetDynakube_Call) RunAndReturn(run func(dk dynakube.DynaKube) dynatraceclient.Builder) *Builder_SetDynakube_Call {
	_c.Call.Return(run)
	return _c
}

// SetTokens provides a mock function for the type Builder
func (_mock *Builder) SetTokens(tokens token.Tokens) dynatraceclient.Builder {
	ret := _mock.Called(tokens)

	if len(ret) == 0 {
		panic("no return value specified for SetTokens")
	}

	var r0 dynatraceclient.Builder
	if returnFunc, ok := ret.Get(0).(func(token.Tokens) dynatraceclient.Builder); ok {
		r0 = returnFunc(tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynatraceclient.Builder)
		}
	}
	return r0
}

// Builder_SetTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTokens'
type Builder_SetTokens_Call struct {
	*mock.Call
}

// SetTokens is a helper method to define mock.On call
//   - tokens token.Tokens
func (_e *Builder_Expecter) SetTokens(tokens interface{}) *Builder_SetTokens_Call {
	return &Builder_SetTokens_Call{Call: _e.mock.On("SetTokens", tokens)}
}

func (_c *Builder_SetTokens_Call) Run(run func(tokens token.Tokens)) *Builder_SetTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 token.Tokens
		if args[0] != nil {
			arg0 = args[0].(token.Tokens)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Builder_SetTokens_Call) Return(builder dynatraceclient.Builder) *Builder_SetTokens_Call {
	_c.Call.Return(builder)
	return _c
}

func (_c *Builder_SetTokens_Call) RunAndReturn(run func(tokens token.Tokens) dynatraceclient.Builder) *Builder_SetTokens_Call {
	_c.Call.Return(run)
	return _c
}
