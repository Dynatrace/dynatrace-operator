// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Dynatrace/dynatrace-operator/pkg/api/latest/dynakube"
	mock "github.com/stretchr/testify/mock"
)

// NewReconciler creates a new instance of Reconciler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReconciler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reconciler {
	mock := &Reconciler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Reconciler is an autogenerated mock type for the Reconciler type
type Reconciler struct {
	mock.Mock
}

type Reconciler_Expecter struct {
	mock *mock.Mock
}

func (_m *Reconciler) EXPECT() *Reconciler_Expecter {
	return &Reconciler_Expecter{mock: &_m.Mock}
}

// ReconcileAPIUrl provides a mock function for the type Reconciler
func (_mock *Reconciler) ReconcileAPIUrl(ctx context.Context, dk *dynakube.DynaKube) error {
	ret := _mock.Called(ctx, dk)

	if len(ret) == 0 {
		panic("no return value specified for ReconcileAPIUrl")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynakube.DynaKube) error); ok {
		r0 = returnFunc(ctx, dk)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Reconciler_ReconcileAPIUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReconcileAPIUrl'
type Reconciler_ReconcileAPIUrl_Call struct {
	*mock.Call
}

// ReconcileAPIUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - dk *dynakube.DynaKube
func (_e *Reconciler_Expecter) ReconcileAPIUrl(ctx interface{}, dk interface{}) *Reconciler_ReconcileAPIUrl_Call {
	return &Reconciler_ReconcileAPIUrl_Call{Call: _e.mock.On("ReconcileAPIUrl", ctx, dk)}
}

func (_c *Reconciler_ReconcileAPIUrl_Call) Run(run func(ctx context.Context, dk *dynakube.DynaKube)) *Reconciler_ReconcileAPIUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynakube.DynaKube
		if args[1] != nil {
			arg1 = args[1].(*dynakube.DynaKube)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Reconciler_ReconcileAPIUrl_Call) Return(err error) *Reconciler_ReconcileAPIUrl_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Reconciler_ReconcileAPIUrl_Call) RunAndReturn(run func(ctx context.Context, dk *dynakube.DynaKube) error) *Reconciler_ReconcileAPIUrl_Call {
	_c.Call.Return(run)
	return _c
}

// ReconcileActiveGateCommunicationHosts provides a mock function for the type Reconciler
func (_mock *Reconciler) ReconcileActiveGateCommunicationHosts(ctx context.Context, dk *dynakube.DynaKube) error {
	ret := _mock.Called(ctx, dk)

	if len(ret) == 0 {
		panic("no return value specified for ReconcileActiveGateCommunicationHosts")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynakube.DynaKube) error); ok {
		r0 = returnFunc(ctx, dk)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Reconciler_ReconcileActiveGateCommunicationHosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReconcileActiveGateCommunicationHosts'
type Reconciler_ReconcileActiveGateCommunicationHosts_Call struct {
	*mock.Call
}

// ReconcileActiveGateCommunicationHosts is a helper method to define mock.On call
//   - ctx context.Context
//   - dk *dynakube.DynaKube
func (_e *Reconciler_Expecter) ReconcileActiveGateCommunicationHosts(ctx interface{}, dk interface{}) *Reconciler_ReconcileActiveGateCommunicationHosts_Call {
	return &Reconciler_ReconcileActiveGateCommunicationHosts_Call{Call: _e.mock.On("ReconcileActiveGateCommunicationHosts", ctx, dk)}
}

func (_c *Reconciler_ReconcileActiveGateCommunicationHosts_Call) Run(run func(ctx context.Context, dk *dynakube.DynaKube)) *Reconciler_ReconcileActiveGateCommunicationHosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynakube.DynaKube
		if args[1] != nil {
			arg1 = args[1].(*dynakube.DynaKube)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Reconciler_ReconcileActiveGateCommunicationHosts_Call) Return(err error) *Reconciler_ReconcileActiveGateCommunicationHosts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Reconciler_ReconcileActiveGateCommunicationHosts_Call) RunAndReturn(run func(ctx context.Context, dk *dynakube.DynaKube) error) *Reconciler_ReconcileActiveGateCommunicationHosts_Call {
	_c.Call.Return(run)
	return _c
}

// ReconcileCodeModuleCommunicationHosts provides a mock function for the type Reconciler
func (_mock *Reconciler) ReconcileCodeModuleCommunicationHosts(ctx context.Context, dk *dynakube.DynaKube) error {
	ret := _mock.Called(ctx, dk)

	if len(ret) == 0 {
		panic("no return value specified for ReconcileCodeModuleCommunicationHosts")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynakube.DynaKube) error); ok {
		r0 = returnFunc(ctx, dk)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Reconciler_ReconcileCodeModuleCommunicationHosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReconcileCodeModuleCommunicationHosts'
type Reconciler_ReconcileCodeModuleCommunicationHosts_Call struct {
	*mock.Call
}

// ReconcileCodeModuleCommunicationHosts is a helper method to define mock.On call
//   - ctx context.Context
//   - dk *dynakube.DynaKube
func (_e *Reconciler_Expecter) ReconcileCodeModuleCommunicationHosts(ctx interface{}, dk interface{}) *Reconciler_ReconcileCodeModuleCommunicationHosts_Call {
	return &Reconciler_ReconcileCodeModuleCommunicationHosts_Call{Call: _e.mock.On("ReconcileCodeModuleCommunicationHosts", ctx, dk)}
}

func (_c *Reconciler_ReconcileCodeModuleCommunicationHosts_Call) Run(run func(ctx context.Context, dk *dynakube.DynaKube)) *Reconciler_ReconcileCodeModuleCommunicationHosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynakube.DynaKube
		if args[1] != nil {
			arg1 = args[1].(*dynakube.DynaKube)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Reconciler_ReconcileCodeModuleCommunicationHosts_Call) Return(err error) *Reconciler_ReconcileCodeModuleCommunicationHosts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Reconciler_ReconcileCodeModuleCommunicationHosts_Call) RunAndReturn(run func(ctx context.Context, dk *dynakube.DynaKube) error) *Reconciler_ReconcileCodeModuleCommunicationHosts_Call {
	_c.Call.Return(run)
	return _c
}
