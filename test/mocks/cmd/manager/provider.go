// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	manager "sigs.k8s.io/controller-runtime/pkg/manager"

	rest "k8s.io/client-go/rest"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// CreateManager provides a mock function with given fields: namespace, config
func (_m *Provider) CreateManager(namespace string, config *rest.Config) (manager.Manager, error) {
	ret := _m.Called(namespace, config)

	if len(ret) == 0 {
		panic("no return value specified for CreateManager")
	}

	var r0 manager.Manager
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *rest.Config) (manager.Manager, error)); ok {
		return rf(namespace, config)
	}
	if rf, ok := ret.Get(0).(func(string, *rest.Config) manager.Manager); ok {
		r0 = rf(namespace, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(manager.Manager)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *rest.Config) error); ok {
		r1 = rf(namespace, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_CreateManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManager'
type Provider_CreateManager_Call struct {
	*mock.Call
}

// CreateManager is a helper method to define mock.On call
//   - namespace string
//   - config *rest.Config
func (_e *Provider_Expecter) CreateManager(namespace interface{}, config interface{}) *Provider_CreateManager_Call {
	return &Provider_CreateManager_Call{Call: _e.mock.On("CreateManager", namespace, config)}
}

func (_c *Provider_CreateManager_Call) Run(run func(namespace string, config *rest.Config)) *Provider_CreateManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*rest.Config))
	})
	return _c
}

func (_c *Provider_CreateManager_Call) Return(_a0 manager.Manager, _a1 error) *Provider_CreateManager_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_CreateManager_Call) RunAndReturn(run func(string, *rest.Config) (manager.Manager, error)) *Provider_CreateManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
