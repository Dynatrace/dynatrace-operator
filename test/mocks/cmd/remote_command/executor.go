// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	context "context"

	mock "github.com/stretchr/testify/mock"

	rest "k8s.io/client-go/rest"
)

// Executor is an autogenerated mock type for the Executor type
type Executor struct {
	mock.Mock
}

type Executor_Expecter struct {
	mock *mock.Mock
}

func (_m *Executor) EXPECT() *Executor_Expecter {
	return &Executor_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: ctx, config, podName, podNamespace, containerName, command
func (_m *Executor) Exec(ctx context.Context, config *rest.Config, podName string, podNamespace string, containerName string, command []string) (*bytes.Buffer, *bytes.Buffer, error) {
	ret := _m.Called(ctx, config, podName, podNamespace, containerName, command)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *bytes.Buffer
	var r1 *bytes.Buffer
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, string, string, string, []string) (*bytes.Buffer, *bytes.Buffer, error)); ok {
		return rf(ctx, config, podName, podNamespace, containerName, command)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, string, string, string, []string) *bytes.Buffer); ok {
		r0 = rf(ctx, config, podName, podNamespace, containerName, command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, string, string, string, []string) *bytes.Buffer); ok {
		r1 = rf(ctx, config, podName, podNamespace, containerName, command)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *rest.Config, string, string, string, []string) error); ok {
		r2 = rf(ctx, config, podName, podNamespace, containerName, command)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Executor_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type Executor_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - config *rest.Config
//   - podName string
//   - podNamespace string
//   - containerName string
//   - command []string
func (_e *Executor_Expecter) Exec(ctx interface{}, config interface{}, podName interface{}, podNamespace interface{}, containerName interface{}, command interface{}) *Executor_Exec_Call {
	return &Executor_Exec_Call{Call: _e.mock.On("Exec", ctx, config, podName, podNamespace, containerName, command)}
}

func (_c *Executor_Exec_Call) Run(run func(ctx context.Context, config *rest.Config, podName string, podNamespace string, containerName string, command []string)) *Executor_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rest.Config), args[2].(string), args[3].(string), args[4].(string), args[5].([]string))
	})
	return _c
}

func (_c *Executor_Exec_Call) Return(stdOut *bytes.Buffer, stdErr *bytes.Buffer, err error) *Executor_Exec_Call {
	_c.Call.Return(stdOut, stdErr, err)
	return _c
}

func (_c *Executor_Exec_Call) RunAndReturn(run func(context.Context, *rest.Config, string, string, string, []string) (*bytes.Buffer, *bytes.Buffer, error)) *Executor_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutor creates a new instance of Executor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Executor {
	mock := &Executor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
