#!/bin/bash

# Check linting and unit tests before commiting
# if linting failes the commit will be aborted and the linting will start auto fixing
# if unit tests fail the commit will be aborted

# Linting

echo Shell: $SHELL

## this will retrieve all of the .yaml files that have been
## changed since the last commit
STAGED_YAML_FILES=$(git diff --cached --name-only -- '*.yaml')

## we can check to see if this is empty
if [[ $STAGED_YAML_FILES != "" ]]; then
    echo "YAML files have changed, generating manifests"
    make manifests
fi

## this will retrieve all of the .go files that have been
## changed since the last commit
STAGED_GO_FILES=$(git diff --cached --name-only -- '*.go')

## we can check to see if this is empty
if [[ $STAGED_GO_FILES == "" ]]; then
    echo "No Go Files to Update"
    exit 0
## otherwise we can do stuff with these changed go files
else
    for file in $STAGED_GO_FILES; do
        gofmt -w $file
        goimports -w $file
        gci write $file
        ## add any potential changes from our formatting to the
        ## commit
        git add $file
    done
fi

golangci-lint run --build-tags containers_image_storage_stub,e2e
res=$?
if [[ $res -ne 0 ]]; then
    echo "Linting failed"
    exit 2
fi

# Unit tests

#exec < /dev/tty
#read -p "Run unit tests[y/n]? " -n 1 -r
#exec <&-
REPLY=y

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Run unit tests..."
    go test ./...
    res=$?
    if [[ $res -ne 0 ]]; then
        echo "Unit test failed"
        exit 2
    fi
fi
echo
