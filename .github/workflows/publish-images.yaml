name: Publish images

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

permissions:
  contents: read

jobs:

  prepare:
    name: Prepare properties
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare build parameters
        id: prep
        run: |
          hack/build/ci/prepare-build-variables.sh
      - name: Prepare build parameters
        id: prepenv
        run: |
          # Set output parameters.
          # Reason: global envs do not work in workflow calls
          # More info: https://github.com/actions/runner/issues/480#issuecomment-1021278915
          echo ::set-output name=goversion::${{ env.GO_VERSION }}
          echo ::set-output name=registry::${{ env.DOCKER_REGISTRY }}
          echo ::set-output name=repository::${{ env.DOCKER_REPOSITORY }}
    outputs:
      labels: ${{ steps.prep.outputs.docker_image_labels }}
      version: ${{ steps.prep.outputs.docker_image_tag }}
      go-linker-args: ${{ steps.prep.outputs.go_linker_args }}
      cgo-cflags: ${{ steps.prep.outputs.cgo_cflags }}
      go-version: "1.18"

  # Workflow needs to build docker images again as separate workflows don't have access to others artifacts
  # https://github.com/actions/download-artifact/issues/3
  build-amd64:
    name: Build image amd64
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: build-image
        uses: ./.github/actions/build-image
        with:
          platform: amd64
          go-version: ${{ needs.prepare.outputs.go-version }}
          go-linker-args: ${{ needs.prepare.outputs.go-linker-args }}
          cgo-cflags: ${{ needs.prepare.outputs.cgo-cflags }}
          labels: ${{ needs.prepare.outputs.labels }}
          image-tag: ${{ needs.prepare.outputs.version }}

  build-arm64:
    name: Build image arm64
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Image
        uses: ./.github/actions/build-image
        with:
          platform: arm64
          go-version: ${{ needs.prepare.outputs.go-version }}
          go-linker-args: ${{ needs.prepare.outputs.go-linker-args }}
          cgo-cflags: ${{ needs.prepare.outputs.cgo-cflags }}
          labels: ${{ needs.prepare.outputs.labels }}
          image-tag: ${{ needs.prepare.outputs.version }}

  push:
    name: Push images
    environment: Release
    needs: [prepare, build-arm64, build-amd64]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64]
        registry: [rhcc, gcr, dockerhub]
        include:
          - registry-name: rhcc
            registry-url: scan.connect.redhat.com
            repository: dynatrace/dynatrace-operator
            username: RHCC_USERNAME
            password: RHCC_PASSWORD
          - registry: gcr
            url: gcr.io
            repository: dynatrace-marketplace-prod/dynatrace-operator
            username: GCR_USERNAME
            password: GCR_JSON_KEY
          - registry: dockerhub
            url: docker.io
            repository: dynatrace/dynatrace-operator
            username: DOCKERHUB_USERNAME
            password: DOCKERHUB_PASSWORD
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Push ${{matrix.platform}} to ${{matrix.registry-name}}
        uses: ./.github/actions/upload-image
        if: ${{ matrix.registry-name != "rhcc" && matrix.platform != "arm64" }}
        with:
          platform: ${{matrix.platform}}
          labels: ${{ needs.prepare.outputs.labels }}
          version: ${{ needs.prepare.outputs.version }}
          registry: ${{matrix.registry-url}}
          repository: ${{matrix.repository}}
          repository-username: ${{ secrets[matrix.username] }}
          repository-password: ${{ secrets[matrix.password] }}
      - name: Run preflight
        if: ${{ matrix.registry-name == "rhcc" && matrix.platform == "amd64" }}
        uses: ./.github/actions/preflight
        with:
          version: ${{ needs.prepare.outputs.version }}
          registry: ${{matrix.registry-url}}
          repository: ${{matrix.repository}}
          report-name: "preflight.json"
          redhat-project-id: ${{ secrets.REDHAT_PROJECT_ID }}
          pyxis-api-token: ${{ secrets.PYXIS_API_TOKEN }}
          rhcc-username: ${{ secrets[matrix.username] }}
          rhcc-password: ${{ secrets[matrix.password] }}

  manifest:
    name: Create Dockerhub manifests
    environment: Release
    needs: [prepare, push-dockerhub-amd, push-dockerhub-arm]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry: [gcr, dockerhub]
        include:
          - registry: gcr
            url: gcr.io
            repository: dynatrace-marketplace-prod/dynatrace-operator
            username: GCR_USERNAME
            password: GCR_JSON_KEY
          - registry: dockerhub
            url: docker.io
            repository: dynatrace/dynatrace-operator
            username: DOCKERHUB_USERNAME
            password: DOCKERHUB_PASSWORD
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create manifests for ${{matrix.registry}}
        uses: ./.github/actions/create-manifests
        with:
          version: ${{ needs.prepare.outputs.version }}
          registry: ${{ matrix.url }}
          repository: ${{ matrix.repository }}
          combined: true
          repository-username: ${{ secrets[matrix.username] }}
          repository-password: ${{ secrets[matrix.password] }}
