name: Build

on:
  workflow_run:
    workflows: [Golang-Check]
    types:
      - completed
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  GO_VERSION: "^1.18"
  DOCKER_REGISTRY: "quay.io"
  DOCKER_REPOSITORY: "dynatrace/dynatrace-operator"

jobs:
  prepare:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Prepare properties
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare build parameters
        id: prep
        run: |
          hack/build/ci/prepare-build-variables.sh
      - name: Prepare build parameters
        id: prepenv
        run: |
          # Set output parameters.
          # Reason: global envs do not work in workflow calls
          # More info: https://github.com/actions/runner/issues/480#issuecomment-1021278915

          echo ::set-output name=goversion::${{ env.GO_VERSION }}
          echo ::set-output name=registry::${{ env.DOCKER_REGISTRY }}
          echo ::set-output name=repository::${{ env.DOCKER_REPOSITORY }}
    outputs:
      labels: ${{ steps.prep.outputs.docker_image_labels }}
      version: ${{ steps.prep.outputs.docker_image_tag }}
      golinkerargs: ${{ steps.prep.outputs.go_linker_args }}
      goversion: ${{ steps.prepenv.outputs.goversion }}
      registry: ${{ steps.prepenv.outputs.registry }}
      repository: ${{ steps.prepenv.outputs.repository }}

  build-amd64:
    name: Build amd64 docker image
    needs: [prepare]
    uses: ./.github/workflows/build-dockerimage.yaml
    with:
      platform: amd64
      goversion: ${{ needs.prepare.outputs.goversion }}
      golinkerargs: ${{ needs.prepare.outputs.golinkerargs }}
      labels: ${{ needs.prepare.outputs.labels }}
      image-tag: ${{ needs.prepare.outputs.version }}

  build-arm64:
    name: Build arm64 docker image
    needs: [prepare]
    uses: ./.github/workflows/build-dockerimage.yaml
    if: ${{ contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release-') }}
    with:
      platform: arm64
      goversion: ${{ needs.prepare.outputs.goversion }}
      golinkerargs: ${{ needs.prepare.outputs.golinkerargs }}
      labels: ${{ needs.prepare.outputs.labels }}
      image-tag: ${{ needs.prepare.outputs.version }}

  upload-amd64:
    name: Upload amd64 image
    needs: [prepare,build-amd64]
    if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork }}
    uses: ./.github/workflows/upload-dockerimage.yaml
    with:
      platform: amd64
      labels: ${{ needs.prepare.outputs.labels }}
      version: ${{ needs.prepare.outputs.version }}
      registry: ${{ needs.prepare.outputs.registry }}
      repository: ${{ needs.prepare.outputs.repository }}
    secrets:
      docker_repo_username: ${{ secrets.QUAY_USERNAME }}
      docker_repo_password: ${{ secrets.QUAY_PASSWORD }}

  upload-arm64:
    name: Upload arm64 image
    needs: [prepare,build-arm64]
    if: |
      (github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork) &&
      (contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release-'))
    uses: ./.github/workflows/upload-dockerimage.yaml
    with:
      platform: arm64
      labels: ${{ needs.prepare.outputs.labels }}
      version: ${{ needs.prepare.outputs.version }}
      registry: ${{ needs.prepare.outputs.registry }}
      repository: ${{ needs.prepare.outputs.repository }}
    secrets:
      docker_repo_username: ${{ secrets.QUAY_USERNAME }}
      docker_repo_password: ${{ secrets.QUAY_PASSWORD }}

  create-manifest-for-combined-images:
    name: Combine images
    needs: [prepare,upload-amd64,upload-arm64]
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork) &&
      (contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release-'))
    env:
      IMAGE_QUAY: ${{ needs.prepare.outputs.registry }}/${{ needs.prepare.outputs.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: ${{ needs.prepare.outputs.registry }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Create manifest
        run: |
          hack/build/ci/create-manifest.sh "${IMAGE_QUAY}" "${{ needs.prepare.outputs.version }}" true

  create-manifest-for-amd:
    name: Create manifest
    needs: [prepare,upload-amd64]
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork) &&
      ! (contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release-'))
    env:
      IMAGE_QUAY: ${{ needs.prepare.outputs.registry }}/${{ needs.prepare.outputs.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: ${{ needs.prepare.outputs.registry }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Create manifest
        run: |
          hack/build/ci/create-manifest.sh "${IMAGE_QUAY}" "${{ needs.prepare.outputs.version }}" false
