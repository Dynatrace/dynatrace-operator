name: CI

on:
  push:
    branches:
      - main
      - release-*
  pull_request:
    branches:
      - "*"

permissions:
  contents: read
  pull-requests: write

env:
  DOCKER_REGISTRY: quay.io
  DOCKER_REPOSITORY: dynatrace/dynatrace-operator
  PLATFORMS: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
  PR_PLATFORMS: linux/amd64,linux/arm64

jobs:
  helm-test:
    name: Run helm unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
      - name: Run Unit tests
        id: helm-unittest
        run: |
          make test/helm/unit

  helm-lint:
    name: Run helm linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
      - name: Run Linting
        id: helm-linting
        run: |
          make test/helm/lint

  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Golang
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: "${{ github.workspace }}/go.mod"
      - name: Run Unit tests and Integration tests
        id: unittest
        run: |
          make go/test
          make go/integration_test
      - name: Upload cover profile artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage.txt
          path: coverage.txt
          if-no-files-found: error

  check-coverage-profile:
    name: Check coverage profile
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: download coverage-txt-profile
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: coverage.txt
      - name: download artifact (main.breakdown)
        id: download-main-breakdown
        uses: dawidd6/action-download-artifact@07ab29fd4a977ae4d2b275087cf67563dfdf0295 # v9
        with:
          branch: introduce-go-test-coverage-github-action
          workflow_conclusion: success
          name: introduce-go-test-coverage-github-action.breakdown
          if_no_artifact_found: warn
      - name: check test coverage
        id: coverage
        uses: vladopajic/go-test-coverage@v2
        continue-on-error: true # Should fail after coverage comment is posted
        with:
          config: ./.testcoverage.yml
          profile: coverage.txt
          git-branch: badges
          git-token: ${{ github.ref_name == 'main' && secrets.GITHUB_TOKEN || '' }}
#          breakdown-file-name: ${{ github.ref_name == 'main' && 'main.breakdown' || '' }}
          breakdown-file-name: 'introduce-go-test-coverage-github-action.breakdown'
          diff-base-breakdown-file-name: ${{ steps.download-main-breakdown.outputs.found_artifact == 'true' && 'introduce-go-test-coverage-github-action.breakdown' || '' }}
      - name: upload artifact (main.breakdown)
        uses: actions/upload-artifact@v4
#        if: github.ref_name == 'main'
        with:
          name: introduce-go-test-coverage-github-action.breakdown
          path: introduce-go-test-coverage-github-action.breakdown
          if-no-files-found: error
      - name: post coverage report
        if: ${{ github.event.pull_request.number }}
        uses: thollander/actions-comment-pull-request@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-tag: coverage-report
          pr-number: ${{ github.event.pull_request.number }}
          message: |
            go-test-coverage report:
            ```
            ${{ fromJSON(steps.coverage.outputs.report) }}
            ```
      - name: "finally check coverage"
        if: steps.coverage.outcome == 'failure'
        shell: bash
        run: |
          echo "coverage check failed" && exit 1

  linting:
    name: Run linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: "${{ github.workspace }}/go.mod"
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@1481404843c368bc19ca9406f87d6e0fc97bdcfd # v7.0.0
        with:
          # renovate depName=github.com/golangci/golangci-lint
          version: v2.1.2
          args: --build-tags e2e --timeout 300s
      - name: Run deadcode
        id: deadcode
        run: |
          make go/deadcode

  generated-files:
    name: Check generated files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: "${{ github.workspace }}/go.mod"
      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      - name: Check deepcopy files are up-to-date
        id: deepcopy
        run: |
          make manifests/deepcopy
          git diff --exit-code
      - name: Check automatic generated docs are up-to-date
        id: doc
        run: |
          make doc
          git diff --exit-code
      - name: Check mocks are up-to-date
        id: mockery
        run: |
          make prerequisites/mockery
          make go/gen_mocks
          git diff --exit-code

  security:
    name: Code security scanning alerts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
        with:
          args: --severity-threshold=high

  markdown-lint:
    name: Lint markdown files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Lint markdown files
        uses: articulate/actions-markdownlint@87f495d21507d6844dc917a01e742eaaa45049c0 # v1.1.0
        with:
          config: .markdownlint.json
          # renovate depName=github.com/igorshubovych/markdownlint-cli
          version: v0.44.0

  prepare:
    name: Prepare properties
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Prepare build parameters
        id: prep
        run: |
          hack/build/ci/prepare-build-variables.sh
    outputs:
      labels: ${{ steps.prep.outputs.docker_image_labels }}
      version: ${{ steps.prep.outputs.docker_image_tag }}

  build-push:
    name: Build images
    runs-on: ubuntu-latest
    needs: [prepare, tests, linting, generated-files]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Login to Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Build image
        uses: ./.github/actions/build-push-image
        with:
          platforms: ${{github.ref_protected && env.PLATFORMS || env.PR_PLATFORMS }}
          labels: ${{ needs.prepare.outputs.labels }}
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ needs.prepare.outputs.version }}
          annotation: "version=${{ needs.prepare.outputs.version }}"
