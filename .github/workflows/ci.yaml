name: CI

on:
  push:
    branches:
      - master
      - release-*
  pull_request:
    branches:
      - "*"

permissions:
  contents: read

env:
  GO_VERSION: "^1.19"
  DOCKER_REGISTRY: "quay.io"
  DOCKER_REPOSITORY: "dynatrace/dynatrace-operator"

jobs:
  helm-test:
    name: Run helm unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Set up Helm
        uses: azure/setup-helm@b5b231a831f96336bbfeccc1329990f0005c5bb1 # v3
        with:
          version: v3.7.1
      - name: Download dependencies
        id: helm-unittest-download
        run: |
          make prerequisites/helm
      - name: Run Unit tests
        id: helm-unittest
        run: |
          make test/helm/unit

  helm-lint:
    name: Run helm linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Set up Helm
        uses: azure/setup-helm@b5b231a831f96336bbfeccc1329990f0005c5bb1 # v3
        with:
          version: v3.8.2
      - name: Run Linting
        id: helm-linting
        run: |
          make test/helm/lint

  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Setup Golang
        uses: actions/setup-go@84cbf8094393cdc5fe1fe1671ff2647332956b1a # v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download dependencies
        id: depdownload
        run: |
          hack/build/ci/install-cgo-dependencies.sh
      - name: Run Unit tests
        id: unittest
        run: |
          make go/test-all

  linting:
    name: Run linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Download dependencies
        id: depdownload
        run: |
          hack/build/ci/install-cgo-dependencies.sh
      - name: golangci-lint
        uses: golangci/golangci-lint-action@537aa1903e5d359d0b27dbc19ddd22c5087f3fbc # v2
        with:
          version: v1.45.2
          args: --build-tags integration,containers_image_storage_stub --timeout 300s

  prepare:
    name: Prepare properties
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Prepare build parameters
        id: prep
        run: |
          hack/build/ci/prepare-build-variables.sh
      - name: Prepare build parameters
        id: prepenv
        run: |
          # Set output parameters.
          # Reason: global envs do not work in workflow calls
          # More info: https://github.com/actions/runner/issues/480#issuecomment-1021278915

          echo ::set-output name=goversion::${{ env.GO_VERSION }}
          echo ::set-output name=registry::${{ env.DOCKER_REGISTRY }}
          echo ::set-output name=repository::${{ env.DOCKER_REPOSITORY }}
    outputs:
      labels: ${{ steps.prep.outputs.docker_image_labels }}
      version: ${{ steps.prep.outputs.docker_image_tag }}
      go-linker-args: ${{ steps.prep.outputs.go_linker_args }}
      cgo-cflags: ${{ steps.prep.outputs.cgo_cflags }}
      go-version: ${{ steps.prepenv.outputs.goversion }}
      registry: ${{ steps.prepenv.outputs.registry }}
      repository: ${{ steps.prepenv.outputs.repository }}

  build-amd64:
    name: Build amd64 docker image
    needs: [prepare, tests, linting]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: build-image
        uses: ./.github/actions/build-image
        with:
          platform: amd64
          go-version: ${{ needs.prepare.outputs.go-version }}
          go-linker-args: ${{ needs.prepare.outputs.go-linker-args }}
          cgo-cflags: ${{ needs.prepare.outputs.cgo-cflags }}
          labels: ${{ needs.prepare.outputs.labels }}
          image-tag: ${{ needs.prepare.outputs.version }}
      - name: Upload Image
        uses: ./.github/actions/upload-image
        with:
          platform: amd64
          labels: ${{ needs.prepare.outputs.labels }}
          version: ${{ needs.prepare.outputs.version }}
          registry: ${{ needs.prepare.outputs.registry }}
          repository: ${{ needs.prepare.outputs.repository }}
          repository-username: ${{ secrets.QUAY_USERNAME }}
          repository-password: ${{ secrets.QUAY_PASSWORD }}
      - name: Create Manifests
        uses: ./.github/actions/create-manifests
        with:
          version: ${{ needs.prepare.outputs.version }}
          registry: ${{ needs.prepare.outputs.registry }}
          repository: ${{ needs.prepare.outputs.repository }}
          combined: false
          repository-username: ${{ secrets.QUAY_USERNAME }}
          repository-password: ${{ secrets.QUAY_PASSWORD }}

  build-arm64:
    name: Build arm64 docker image
    needs: [prepare, tests, linting]
    if: ${{ contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release-') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: build-image
        uses: ./.github/actions/build-image
        with:
          platform: arm64
          go-version: ${{ needs.prepare.outputs.go-version }}
          go-linker-args: ${{ needs.prepare.outputs.go-linker-args }}
          cgo-cflags: ${{ needs.prepare.outputs.cgo-cflags }}
          labels: ${{ needs.prepare.outputs.labels }}
          image-tag: ${{ needs.prepare.outputs.version }}
      - name: Upload Image
        uses: ./.github/actions/upload-image
        with:
          platform: arm64
          labels: ${{ needs.prepare.outputs.labels }}
          version: ${{ needs.prepare.outputs.version }}
          registry: ${{ needs.prepare.outputs.registry }}
          repository: ${{ needs.prepare.outputs.repository }}
          repository-username: ${{ secrets.QUAY_USERNAME }}
          repository-password: ${{ secrets.QUAY_PASSWORD }}

  create-manifest-for-combined-images:
    name: Combine images
    needs: [prepare, build-arm64, build-amd64]
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork) &&
      (contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release-'))
    env:
      IMAGE_QUAY: ${{ needs.prepare.outputs.registry }}/${{ needs.prepare.outputs.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Create Manifests
        uses: ./.github/actions/create-manifests
        with:
          version: ${{ needs.prepare.outputs.version }}
          registry: ${{ needs.prepare.outputs.registry }}
          repository: ${{ needs.prepare.outputs.repository }}
          combined: true
          repository-username: ${{ secrets.QUAY_USERNAME }}
          repository-password: ${{ secrets.QUAY_PASSWORD }}
