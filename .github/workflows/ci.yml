name: CI

env:
  GO_VERSION: "^1.18"

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  helm-test:
    name: Run helm unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.1
      - name: Download dependencies
        id: helm-unittest-download
        run: |
          helm plugin install https://github.com/quintush/helm-unittest --version 0.2.6
      - name: Run Unit tests
        id: helm-unittest
        run: |
          make helm-test

  helm-lint:
    name: Run helm linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.1
      - name: Run Linting
        id: helm-linting
        run: |
          make helm-lint


  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download dependencies
        id: depdownload
        run: |
          sudo apt-get update
          sudo apt-get install -y libdevmapper-dev libbtrfs-dev libgpgme-dev
      - name: Run Unit tests
        id: unittest
        run: |
          chmod +x ./build/test.sh
          ./build/test.sh

  linting:
    name: Run linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download dependencies
        id: depdownload
        run: |
          sudo apt-get update
          sudo apt-get install -y libdevmapper-dev libbtrfs-dev libgpgme-dev
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.45.2
          args: --build-tags integration,containers_image_storage_stub --timeout 300s

  builddockerimage:
    name: Build docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: amd64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ./third_party_licenses
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-
      - name: Prepare
        id: prep
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="snapshot-$(echo ${GITHUB_HEAD_REF} | sed 's#[^a-zA-Z0-9_-]#-#g')"
          else
            if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
              VERSION="${GITHUB_REF_NAME}"
            elif [[ "${GITHUB_REF_NAME}" == "master" ]]; then
              VERSION="snapshot"
            else
              VERSION="snapshot-$(echo ${GITHUB_REF_NAME} | sed 's#[^a-zA-Z0-9_-]#-#g')"
            fi
          fi

          LABELS=""
          if [[ "${GITHUB_REF_TYPE}" != "tag" ]] && [[ ! "${GITHUB_REF_NAME}" =~ ^release-* ]]; then
            LABELS="quay.expires-after=10d"
          fi

          build_date="$(date -u +"%Y-%m-%dT%H:%M:%S+00:00")"
          go_build_args=(
            "-ldflags=-X 'github.com/Dynatrace/dynatrace-operator/src/version.Version=${VERSION}'"
            "-X 'github.com/Dynatrace/dynatrace-operator/src/version.Commit=${GITHUB_SHA}'"
            "-X 'github.com/Dynatrace/dynatrace-operator/src/version.BuildDate=${build_date}'"
            "-s -w"
          )

          # Set output parameters.
          echo ::set-output name=goargs::"${go_build_args[@]}"

          echo ::set-output name=labels::${LABELS}
          echo ::set-output name=version::${VERSION}

          # Get licenses if no cache exists
          if ! [ -d ./third_party_licenses ]; then
            go get github.com/google/go-licenses && go-licenses save ./... --save_path third_party_licenses --force
          fi

          # Get dependencies
          go get -d ./...
          ls -la $HOME/go/pkg/mod
          cp -r $HOME/go/pkg/mod .
      - name: Build amd64
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            GO_BUILD_ARGS=${{ steps.prep.outputs.goargs }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: operator-amd64:${{ steps.prep.outputs.version }}
          labels: ${{ steps.prep.outputs.labels }}
          outputs: type=docker,dest=/tmp/operator-amd64.tar
      - name: Build arm64
        uses: docker/build-push-action@v2
        if: ${{ contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release-') }}
        with:
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            GO_BUILD_ARGS=${{ steps.prep.outputs.goargs }}
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: false
          tags: operator-arm64:${{ steps.prep.outputs.version }}
          labels: ${{ steps.prep.outputs.labels }}
          outputs: type=docker,dest=/tmp/operator-arm64.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: operator
          path: /tmp/operator*.tar
          retention-days: 1
    outputs:
      labels: ${{ steps.prep.outputs.labels }}
      version: ${{ steps.prep.outputs.version }}

  uploaddockerimage:
    name: Upload docker image to quay
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'pull_request' ||
      !github.event.pull_request.head.repo.fork
    needs: [tests, linting, builddockerimage]
    env:
      IMAGE_QUAY: quay.io/dynatrace/dynatrace-operator
    steps:
      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: operator
          path: /tmp
      - name: Upload image to Quay
        env:
          # reuse variables defined during build job
          LABELS: ${{ needs.builddockerimage.outputs.labels }}
          TAG: ${{ needs.builddockerimage.outputs.version }}
        run: |
          docker load --input /tmp/operator-amd64.tar

          if [[ -f "/tmp/operator-arm64.tar" ]]; then
            echo "we build for arm too => combine images"
            docker load --input /tmp/operator-arm64.tar
            docker tag operator-arm64:${TAG} ${IMAGE_QUAY}:${TAG}-arm64
            docker tag operator-amd64:${TAG} ${IMAGE_QUAY}:${TAG}-amd64
            docker push ${IMAGE_QUAY}:${TAG}-arm64
            docker push ${IMAGE_QUAY}:${TAG}-amd64

            docker manifest create ${IMAGE_QUAY}:${TAG} ${IMAGE_QUAY}:${TAG}-arm64 ${IMAGE_QUAY}:${TAG}-amd64
            docker manifest push ${IMAGE_QUAY}:${TAG}
          else
            docker tag operator-amd64:${TAG} ${IMAGE_QUAY}:${TAG}
            docker push ${IMAGE_QUAY}:${TAG}
          fi
