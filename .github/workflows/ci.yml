name: CI

env:
  GO_VERSION: "^1.18"

on:
  push:
    branches:
      - master
      - release-*
  pull_request:
    branches:
      - "*"

jobs:
  helm-test:
    name: Run helm unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.1
      - name: Download dependencies
        id: helm-unittest-download
        run: |
          helm plugin install https://github.com/quintush/helm-unittest --version 0.2.8
      - name: Run Unit tests
        id: helm-unittest
        run: |
          make helm-test

  helm-lint:
    name: Run helm linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.2
      - name: Run Linting
        id: helm-linting
        run: |
          make helm-lint


  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download dependencies
        id: depdownload
        run: |
          sudo apt-get update
          sudo apt-get install -y libdevmapper-dev libbtrfs-dev libgpgme-dev
      - name: Run Unit tests
        id: unittest
        run: |
          chmod +x ./hack/build/test.sh
          ./hack/build/test.sh

  linting:
    name: Run linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download dependencies
        id: depdownload
        run: |
          sudo apt-get update
          sudo apt-get install -y libdevmapper-dev libbtrfs-dev libgpgme-dev
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.45.2
          args: --build-tags integration,containers_image_storage_stub --timeout 300s

  preparing:
    name: Prepare labels, version and goargs
    runs-on: ubuntu-latest
    steps:
      - name: prepare
        id: prep
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="snapshot-$(echo ${GITHUB_HEAD_REF} | sed 's#[^a-zA-Z0-9_-]#-#g')"
          else
            if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
              VERSION="${GITHUB_REF_NAME}"
            elif [[ "${GITHUB_REF_NAME}" == "master" ]]; then
              VERSION="snapshot"
            else
              VERSION="snapshot-$(echo ${GITHUB_REF_NAME} | sed 's#[^a-zA-Z0-9_-]#-#g')"
            fi
          fi

          LABELS=""
          if [[ "${GITHUB_REF_TYPE}" != "tag" ]] && [[ ! "${GITHUB_REF_NAME}" =~ ^release-* ]]; then
            LABELS="quay.expires-after=10d"
          fi

          build_date="$(date -u +"%Y-%m-%dT%H:%M:%S+00:00")"
          go_build_args=(
            "-ldflags=-X 'github.com/Dynatrace/dynatrace-operator/src/version.Version=${VERSION}'"
            "-X 'github.com/Dynatrace/dynatrace-operator/src/version.Commit=${GITHUB_SHA}'"
            "-X 'github.com/Dynatrace/dynatrace-operator/src/version.BuildDate=${build_date}'"
            "-s -w"
          )

          # Set output parameters.
          echo ::set-output name=goargs::"${go_build_args[@]}"

          echo ::set-output name=labels::${LABELS}
          echo ::set-output name=version::${VERSION}
    outputs:
      labels: ${{ steps.prep.outputs.labels }}
      version: ${{ steps.prep.outputs.version }}
      goargs: ${{ steps.prep.outputs.goargs }}

  prepare_go_version:
    name: workaround for GO_VERSION env variable
    runs-on: ubuntu-latest
    steps:
      - name: prepare
        id: prep
        run: |
          goversion="${{ env.GO_VERSION }}"

          # Set output parameters.
          echo ::set-output name=goversion::${goversion}
    outputs:
      goversion: ${{ steps.prep.outputs.goversion }}

  buildamd64:
    name: Build amd64 image
    needs: [preparing,prepare_go_version]
    uses: ./.github/workflows/builddockerimage.yml
    with:
      platform: amd64
      goversion: ${{ needs.prepare_go_version.outputs.goversion }}
      goargs: ${{ needs.preparing.outputs.goargs }}
      labels: ${{ needs.preparing.outputs.labels }}
      version: ${{ needs.preparing.outputs.version }}

  buildarm64:
    name: Build arm64 image
    needs: [preparing,prepare_go_version]
    uses: ./.github/workflows/builddockerimage.yml
    if: ${{ contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release-') }}
    with:
      platform: arm64
      goversion: ${{ needs.prepare_go_version.outputs.goversion }}
      goargs: ${{ needs.preparing.outputs.goargs }}
      labels: ${{ needs.preparing.outputs.labels }}
      version: ${{ needs.preparing.outputs.version }}

  uploadamd64:
    name: Upload amd64 image
    needs: [tests,linting,preparing,buildamd64]
    if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork }}
    uses: ./.github/workflows/uploaddockerimage.yml
    with:
      platform: amd64
      labels: ${{ needs.preparing.outputs.labels }}
      version: ${{ needs.preparing.outputs.version }}
      registry: quay.io
    secrets:
      docker_repo_username: ${{ secrets.QUAY_USERNAME }}
      docker_repo_password: ${{ secrets.QUAY_PASSWORD }}

  uploadarm64:
    name: Upload arm64 image
    needs: [tests,linting,preparing,buildarm64]
    if: |
      (github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork) &&
      (contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release-'))
    uses: ./.github/workflows/uploaddockerimage.yml
    with:
      platform: arm64
      labels: ${{ needs.preparing.outputs.labels }}
      version: ${{ needs.preparing.outputs.version }}
      registry: quay.io
    secrets:
      docker_repo_username: ${{ secrets.QUAY_USERNAME }}
      docker_repo_password: ${{ secrets.QUAY_PASSWORD }}

  create_docker_manifest:
    name: Combine images
    needs: [preparing,uploadamd64,uploadarm64]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork }}
    env:
      IMAGE_QUAY: quay.io/dynatrace/dynatrace-operator
    steps:
      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Create manifest
        run: |
            if [[ "${GITHUB_REF_NAME}" == "master" ]] || [[ "${GITHUB_REF_NAME}" =~ ^release-* ]]; then
              echo "we build for arm too => combine images"
              docker manifest create ${IMAGE_QUAY}:${{ needs.preparing.outputs.version }} ${IMAGE_QUAY}:${{ needs.preparing.outputs.version }}-arm64 ${IMAGE_QUAY}:${{ needs.preparing.outputs.version }}-amd64
            else
              echo "we build for amd only"
              docker manifest create ${IMAGE_QUAY}:${{ needs.preparing.outputs.version }} ${IMAGE_QUAY}:${{ needs.preparing.outputs.version }}-amd64
            fi
            docker manifest push ${IMAGE_QUAY}:${{ needs.preparing.outputs.version }}

