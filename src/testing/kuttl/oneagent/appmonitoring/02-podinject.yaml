# Deploy sample apps in created namespaces
apiVersion: v1
kind: Pod
metadata:
  name: nodejs-musl
  namespace: already-present-app-monitoring
  annotations:
    oneagent.dynatrace.com/technologies: nodejs
    oneagent.dynatrace.com/flavor: musl
    oneagent.dynatrace.com/failure-policy: fail
  labels:
    app: nodejs-musl
spec:
  initContainers:
  - command: [ "wget", "-O", "/app/app.js", "https://s3.amazonaws.com/dt-paas/sample-apps/hello-world.js" ]
    image: docker.io/alpine:3.7
    imagePullPolicy: IfNotPresent
    name: artefact
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /app
      name: artefact
  containers:
  - command: [ "node", "/app/app.js" ]
    image: docker.io/node:8-alpine
    imagePullPolicy: Always
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 600
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 2
    name: app
    env:
      - name: DT_DEBUGFLAGS
        value: debugBootstrapNative=true
    ports:
    - containerPort: 8080
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /
        port: 8080
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      requests:
        memory: 256Mi
      limits:
        memory: 256Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /app
      name: artefact
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    runAsUser: 1001
  terminationGracePeriodSeconds: 30
  volumes:
  - emptyDir: {}
    name: artefact
---
apiVersion: v1
kind: Pod
metadata:
  name: java-glibc
  namespace: inject-into-app-monitoring
  annotations:
    oneagent.dynatrace.com/technologies: java
    oneagent.dynatrace.com/failure-policy: fail
  labels:
    app: java-glibc
spec:
  containers:
  - command: [ "java", "-jar", "/app/app.jar" ]
    image: docker.io/dtcloudplatform/openjdk:latest
    imagePullPolicy: Always
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 600
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 2
    name: app
    env:
      - name: DT_DEBUGFLAGS
        value: debugBootstrapNative=true
    ports:
    - containerPort: 8080
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /
        port: 8080
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        memory: 1Gi
      requests:
        memory: 768Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /app
      name: artefact
  dnsPolicy: ClusterFirst
  initContainers:
  - command: [ "wget", "-O", "/app/app.jar", "https://s3.amazonaws.com/dt-paas/sample-apps/spring-music-1.0.jar" ]
    image: docker.io/alpine:3.7
    imagePullPolicy: IfNotPresent
    name: artefact
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /app
      name: artefact
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    runAsUser: 1001
  terminationGracePeriodSeconds: 30
  volumes:
  - emptyDir: {}
    name: artefact
---
apiVersion: v1
kind: Pod
metadata:
  name: php-glibc
  namespace: leave-alone-app-monitoring
  annotations:
    oneagent.dynatrace.com/technologies: php
    oneagent.dynatrace.com/failure-policy: fail
  labels:
    app: php-glibc
spec:
  containers:
    - image: docker.io/php:fpm-stretch
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        tcpSocket:
          port: 9000
        initialDelaySeconds: 600
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 2
      name: app
      env:
        - name: DT_DEBUGFLAGS
          value: debugBootstrapNative=true
      ports:
        - containerPort: 9000
          protocol: TCP
      readinessProbe:
        failureThreshold: 3
        tcpSocket:
          port: 9000
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          memory: 64Mi
        limits:
          memory: 128Mi
  restartPolicy: Always
  securityContext:
    runAsUser: 1001
  terminationGracePeriodSeconds: 30
