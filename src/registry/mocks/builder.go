// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	registry "github.com/Dynatrace/dynatrace-operator/src/registry"
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientBuilder is an autogenerated mock type for the ClientBuilder type
type MockClientBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *MockClientBuilder) Build() (registry.ImageGetter, error) {
	ret := _m.Called()

	var r0 registry.ImageGetter
	var r1 error
	if rf, ok := ret.Get(0).(func() (registry.ImageGetter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() registry.ImageGetter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ImageGetter)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetApiReader provides a mock function with given fields: _a0
func (_m *MockClientBuilder) SetApiReader(_a0 client.Reader) registry.ClientBuilder {
	ret := _m.Called(_a0)

	var r0 registry.ClientBuilder
	if rf, ok := ret.Get(0).(func(client.Reader) registry.ClientBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ClientBuilder)
		}
	}

	return r0
}

// SetContext provides a mock function with given fields: _a0
func (_m *MockClientBuilder) SetContext(_a0 context.Context) registry.ClientBuilder {
	ret := _m.Called(_a0)

	var r0 registry.ClientBuilder
	if rf, ok := ret.Get(0).(func(context.Context) registry.ClientBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ClientBuilder)
		}
	}

	return r0
}

// SetKeyChainSecret provides a mock function with given fields: _a0
func (_m *MockClientBuilder) SetKeyChainSecret(_a0 *v1.Secret) registry.ClientBuilder {
	ret := _m.Called(_a0)

	var r0 registry.ClientBuilder
	if rf, ok := ret.Get(0).(func(*v1.Secret) registry.ClientBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ClientBuilder)
		}
	}

	return r0
}

// SetProxy provides a mock function with given fields: _a0
func (_m *MockClientBuilder) SetProxy(_a0 string) registry.ClientBuilder {
	ret := _m.Called(_a0)

	var r0 registry.ClientBuilder
	if rf, ok := ret.Get(0).(func(string) registry.ClientBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ClientBuilder)
		}
	}

	return r0
}

// SetTrustedCAs provides a mock function with given fields: _a0
func (_m *MockClientBuilder) SetTrustedCAs(_a0 []byte) registry.ClientBuilder {
	ret := _m.Called(_a0)

	var r0 registry.ClientBuilder
	if rf, ok := ret.Get(0).(func([]byte) registry.ClientBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ClientBuilder)
		}
	}

	return r0
}

// NewMockClientBuilder creates a new instance of MockClientBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientBuilder {
	mock := &MockClientBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
