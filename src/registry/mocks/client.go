// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	authn "github.com/google/go-containerregistry/pkg/authn"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	name "github.com/google/go-containerregistry/pkg/name"

	registry "github.com/Dynatrace/dynatrace-operator/src/registry"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// GetImageVersion provides a mock function with given fields: ctx, ref, keychain, transport
func (_m *MockClient) GetImageVersion(ctx context.Context, ref name.Reference, keychain authn.Keychain, transport *http.Transport) (registry.ImageVersion, error) {
	ret := _m.Called(ctx, ref, keychain, transport)

	var r0 registry.ImageVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, name.Reference, authn.Keychain, *http.Transport) (registry.ImageVersion, error)); ok {
		return rf(ctx, ref, keychain, transport)
	}
	if rf, ok := ret.Get(0).(func(context.Context, name.Reference, authn.Keychain, *http.Transport) registry.ImageVersion); ok {
		r0 = rf(ctx, ref, keychain, transport)
	} else {
		r0 = ret.Get(0).(registry.ImageVersion)
	}

	if rf, ok := ret.Get(1).(func(context.Context, name.Reference, authn.Keychain, *http.Transport) error); ok {
		r1 = rf(ctx, ref, keychain, transport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
